{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { loadComments, loadGuitar, loadGuitars, loadGuitarsPrice, loadGuitarsRating, sendComment } from './guitar-data';\nimport { errorHandle } from '../services/error-handle';\nimport { APIRoute } from '../const';\nexport const fetchGuitarsAction = createAsyncThunk('data/fetchGuitars', async (_arg, _ref) => {\n  let {\n    dispatch,\n    extra: api\n  } = _ref;\n\n  try {\n    const {\n      data\n    } = await api.get(APIRoute.Guitars);\n    dispatch(loadGuitars(data));\n  } catch (error) {\n    errorHandle(error);\n  }\n});\nexport const fetchGuitarsPriceAction = createAsyncThunk('data/fetchGuitarsPrice', async (_arg, _ref2) => {\n  let {\n    dispatch,\n    extra: api\n  } = _ref2;\n\n  try {\n    const {\n      data\n    } = await api.get(APIRoute.SortPrice);\n    dispatch(loadGuitarsPrice(data));\n  } catch (error) {\n    errorHandle(error);\n  }\n});\nexport const fetchGuitarsRatingAction = createAsyncThunk('data/fetchGuitarsPrice', async (_arg, _ref3) => {\n  let {\n    dispatch,\n    extra: api\n  } = _ref3;\n\n  try {\n    const {\n      data\n    } = await api.get(APIRoute.SortRating);\n    dispatch(loadGuitarsRating(data));\n  } catch (error) {\n    errorHandle(error);\n  }\n});\nexport const fetchGuitarAction = createAsyncThunk('data/fetchGuitar', async (guitarId, _ref4) => {\n  let {\n    dispatch,\n    extra: api\n  } = _ref4;\n\n  try {\n    const {\n      data\n    } = await api.get(`${APIRoute.Guitar}${guitarId}`);\n    dispatch(loadGuitar(data));\n  } catch (error) {\n    errorHandle(error);\n  }\n});\nexport const fetchCommentsAction = createAsyncThunk('data/fetchComments', async (guitarId, _ref5) => {\n  let {\n    dispatch,\n    extra: api\n  } = _ref5;\n\n  try {\n    const {\n      data\n    } = await api.get(`${APIRoute.Guitar}${guitarId}${APIRoute.Comments}`);\n    dispatch(loadComments(data));\n  } catch (error) {\n    errorHandle(error);\n  }\n});\nexport const sendCommentAction = createAsyncThunk('data/sendComment', async (_ref6, _ref7) => {\n  let {\n    guitarId,\n    userName,\n    advantage,\n    disadvantage,\n    comment,\n    rating\n  } = _ref6;\n  let {\n    dispatch,\n    extra: api\n  } = _ref7;\n\n  try {\n    const data = {\n      guitarId,\n      userName,\n      advantage,\n      disadvantage,\n      comment,\n      rating\n    };\n    await api.post(APIRoute.Comments, data);\n    dispatch(sendComment(false));\n  } catch (error) {\n    errorHandle(error);\n    dispatch(sendComment(true));\n  }\n});","map":{"version":3,"sources":["/Users/mashkust/react-starter-pack-main/src/store/api-actions.ts"],"names":["createAsyncThunk","loadComments","loadGuitar","loadGuitars","loadGuitarsPrice","loadGuitarsRating","sendComment","errorHandle","APIRoute","fetchGuitarsAction","_arg","dispatch","extra","api","data","get","Guitars","error","fetchGuitarsPriceAction","SortPrice","fetchGuitarsRatingAction","SortRating","fetchGuitarAction","guitarId","Guitar","fetchCommentsAction","Comments","sendCommentAction","userName","advantage","disadvantage","comment","rating","post"],"mappings":"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","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { Guitar, NewReview, Comment, AppDispatch, State } from '../types/types';\nimport { loadComments, loadGuitar, loadGuitars, loadGuitarsPrice, loadGuitarsRating, sendComment } from './guitar-data';\nimport { errorHandle } from '../services/error-handle';\nimport { APIRoute } from '../const';\nimport { AxiosInstance } from 'axios';\n\n\nexport const fetchGuitarsAction = createAsyncThunk<void, undefined, {\n  dispatch: AppDispatch,\n  state: State,\n  extra: AxiosInstance\n}>(\n  'data/fetchGuitars',\n  async (_arg, {dispatch, extra: api}) => {\n    try {\n      const { data } = await api.get<Guitar[]>(APIRoute.Guitars);\n      dispatch(loadGuitars(data));\n    } catch (error) {\n      errorHandle(error);\n    }\n  },\n);\n\nexport const fetchGuitarsPriceAction = createAsyncThunk<void, undefined, {\n  dispatch: AppDispatch,\n  state: State,\n  extra: AxiosInstance\n}>(\n  'data/fetchGuitarsPrice',\n  async (_arg, {dispatch, extra: api}) => {\n    try {\n      const { data } = await api.get<Guitar[]>(APIRoute.SortPrice);\n      dispatch(loadGuitarsPrice(data));\n    } catch (error) {\n      errorHandle(error);\n    }\n  },\n);\n\nexport const fetchGuitarsRatingAction = createAsyncThunk<void, undefined, {\n  dispatch: AppDispatch,\n  state: State,\n  extra: AxiosInstance\n}>(\n  'data/fetchGuitarsPrice',\n  async (_arg, {dispatch, extra: api}) => {\n    try {\n      const { data } = await api.get<Guitar[]>(APIRoute.SortRating);\n      dispatch(loadGuitarsRating(data));\n    } catch (error) {\n      errorHandle(error);\n    }\n  },\n);\n\nexport const fetchGuitarAction = createAsyncThunk<void, number, {\n  dispatch: AppDispatch,\n  state: State,\n  extra: AxiosInstance\n}>(\n  'data/fetchGuitar',\n  async (guitarId, {dispatch, extra: api}) => {\n    try {\n      const { data } = await api.get<Guitar>(`${APIRoute.Guitar}${guitarId}`);\n      dispatch(loadGuitar(data));\n    } catch (error) {\n      errorHandle(error);\n    }\n  },\n);\n\nexport const fetchCommentsAction = createAsyncThunk<void, number, {\n  dispatch: AppDispatch,\n  state: State,\n  extra: AxiosInstance\n}>(\n  'data/fetchComments',\n  async (guitarId, {dispatch, extra: api}) => {\n    try {\n      const { data } = await api.get<Comment[]>(`${APIRoute.Guitar}${guitarId}${APIRoute.Comments}`);\n      dispatch(loadComments(data));\n    } catch (error) {\n      errorHandle(error);\n    }\n  },\n);\n\nexport const sendCommentAction = createAsyncThunk<void, NewReview, {\n  dispatch: AppDispatch,\n  state: State,\n  extra: AxiosInstance\n}>(\n  'data/sendComment',\n  async ({ guitarId, userName, advantage, disadvantage, comment, rating }, {dispatch, extra: api} ) => {\n    try {\n      const data = { guitarId, userName, advantage, disadvantage, comment, rating };\n      await api.post<NewReview>(APIRoute.Comments, data);\n      dispatch(sendComment(false));\n    } catch (error) {\n      errorHandle(error);\n      dispatch(sendComment(true));\n    }\n  },\n);\n"]},"metadata":{},"sourceType":"module"}