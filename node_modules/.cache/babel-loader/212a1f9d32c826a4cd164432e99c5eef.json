{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit'; //import { api, store } from './index';\n\nimport { loadComments, loadGuitar, loadGuitars, sendComment } from './guitar-data';\nimport { errorHandle } from '../services/error-handle';\nimport { APIRoute } from '../const';\nexport const fetchGuitarsAction = createAsyncThunk('data/fetchGuitars', async () => {\n  try {\n    const {\n      data\n    } = await api.get(APIRoute.Guitars);\n    store.dispatch(loadGuitars(data));\n  } catch (error) {\n    errorHandle(error);\n  }\n});\nexport const fetchGuitarAction = createAsyncThunk('data/fetchGuitar', async guitarId => {\n  try {\n    const {\n      data\n    } = await api.get(`${APIRoute.Guitar}${guitarId}`);\n    store.dispatch(loadGuitar(data));\n  } catch (error) {\n    errorHandle(error);\n  }\n});\nexport const fetchCommentsAction = createAsyncThunk('data/fetchComments', async (guitarId, _ref) => {\n  let {\n    dispatch,\n    extra: api\n  } = _ref;\n\n  try {\n    const {\n      data\n    } = await api.get(`${APIRoute.Guitar}${guitarId}${APIRoute.Comments}`);\n    dispatch(loadComments(data));\n  } catch (error) {\n    errorHandle(error);\n  }\n});\nexport const sendCommentAction = createAsyncThunk('data/sendComment', async (_ref2, _ref3) => {\n  let {\n    guitarId,\n    userName,\n    advantage,\n    disadvantage,\n    comment,\n    rating\n  } = _ref2;\n  let {\n    dispatch,\n    extra: api\n  } = _ref3;\n\n  try {\n    const data = {\n      guitarId,\n      userName,\n      advantage,\n      disadvantage,\n      comment,\n      rating\n    };\n    await api.post(APIRoute.Comments, data);\n    dispatch(sendComment(false));\n  } catch (error) {\n    errorHandle(error);\n    dispatch(sendComment(true));\n  }\n});","map":{"version":3,"sources":["/Users/mashkust/react-starter-pack-main/src/store/api-actions.ts"],"names":["createAsyncThunk","loadComments","loadGuitar","loadGuitars","sendComment","errorHandle","APIRoute","fetchGuitarsAction","data","api","get","Guitars","store","dispatch","error","fetchGuitarAction","guitarId","Guitar","fetchCommentsAction","extra","Comments","sendCommentAction","userName","advantage","disadvantage","comment","rating","post"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,kBAAjC,C,CACA;;AAEA,SAASC,YAAT,EAAuBC,UAAvB,EAAmCC,WAAnC,EAAgDC,WAAhD,QAAmE,eAAnE;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,QAAT,QAAyB,UAAzB;AAIA,OAAO,MAAMC,kBAAkB,GAAGP,gBAAgB,CAChD,mBADgD,EAEhD,YAAY;AACV,MAAI;AACF,UAAM;AAAEQ,MAAAA;AAAF,QAAW,MAAMC,GAAG,CAACC,GAAJ,CAAkBJ,QAAQ,CAACK,OAA3B,CAAvB;AACAC,IAAAA,KAAK,CAACC,QAAN,CAAeV,WAAW,CAACK,IAAD,CAA1B;AACD,GAHD,CAGE,OAAOM,KAAP,EAAc;AACdT,IAAAA,WAAW,CAACS,KAAD,CAAX;AACD;AACF,CAT+C,CAA3C;AAYP,OAAO,MAAMC,iBAAiB,GAAGf,gBAAgB,CAC/C,kBAD+C,EAE/C,MAAOgB,QAAP,IAA4B;AAC1B,MAAI;AACF,UAAM;AAAER,MAAAA;AAAF,QAAW,MAAMC,GAAG,CAACC,GAAJ,CAAiB,GAAEJ,QAAQ,CAACW,MAAO,GAAED,QAAS,EAA9C,CAAvB;AACAJ,IAAAA,KAAK,CAACC,QAAN,CAAeX,UAAU,CAACM,IAAD,CAAzB;AACD,GAHD,CAGE,OAAOM,KAAP,EAAc;AACdT,IAAAA,WAAW,CAACS,KAAD,CAAX;AACD;AACF,CAT8C,CAA1C;AAYP,OAAO,MAAMI,mBAAmB,GAAGlB,gBAAgB,CAKjD,oBALiD,EAMjD,OAAOgB,QAAP,WAA4C;AAAA,MAA3B;AAACH,IAAAA,QAAD;AAAWM,IAAAA,KAAK,EAAEV;AAAlB,GAA2B;;AAC1C,MAAI;AACF,UAAM;AAAED,MAAAA;AAAF,QAAW,MAAMC,GAAG,CAACC,GAAJ,CAAoB,GAAEJ,QAAQ,CAACW,MAAO,GAAED,QAAS,GAAEV,QAAQ,CAACc,QAAS,EAArE,CAAvB;AACAP,IAAAA,QAAQ,CAACZ,YAAY,CAACO,IAAD,CAAb,CAAR;AACD,GAHD,CAGE,OAAOM,KAAP,EAAc;AACdT,IAAAA,WAAW,CAACS,KAAD,CAAX;AACD;AACF,CAbgD,CAA5C;AAgBP,OAAO,MAAMO,iBAAiB,GAAGrB,gBAAgB,CAK/C,kBAL+C,EAM/C,wBAAqG;AAAA,MAA9F;AAAEgB,IAAAA,QAAF;AAAYM,IAAAA,QAAZ;AAAsBC,IAAAA,SAAtB;AAAiCC,IAAAA,YAAjC;AAA+CC,IAAAA,OAA/C;AAAwDC,IAAAA;AAAxD,GAA8F;AAAA,MAA5B;AAACb,IAAAA,QAAD;AAAWM,IAAAA,KAAK,EAAEV;AAAlB,GAA4B;;AACnG,MAAI;AACF,UAAMD,IAAI,GAAG;AAAEQ,MAAAA,QAAF;AAAYM,MAAAA,QAAZ;AAAsBC,MAAAA,SAAtB;AAAiCC,MAAAA,YAAjC;AAA+CC,MAAAA,OAA/C;AAAwDC,MAAAA;AAAxD,KAAb;AACA,UAAMjB,GAAG,CAACkB,IAAJ,CAAoBrB,QAAQ,CAACc,QAA7B,EAAuCZ,IAAvC,CAAN;AACAK,IAAAA,QAAQ,CAACT,WAAW,CAAC,KAAD,CAAZ,CAAR;AACD,GAJD,CAIE,OAAOU,KAAP,EAAc;AACdT,IAAAA,WAAW,CAACS,KAAD,CAAX;AACAD,IAAAA,QAAQ,CAACT,WAAW,CAAC,IAAD,CAAZ,CAAR;AACD;AACF,CAf8C,CAA1C","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\n//import { api, store } from './index';\nimport { Guitar, NewReview, Comment, AppDispatch, State } from '../types/types';\nimport { loadComments, loadGuitar, loadGuitars, sendComment } from './guitar-data';\nimport { errorHandle } from '../services/error-handle';\nimport { APIRoute } from '../const';\nimport { AxiosInstance } from 'axios';\n\n\nexport const fetchGuitarsAction = createAsyncThunk(\n  'data/fetchGuitars',\n  async () => {\n    try {\n      const { data } = await api.get<Guitar[]>(APIRoute.Guitars);\n      store.dispatch(loadGuitars(data));\n    } catch (error) {\n      errorHandle(error);\n    }\n  },\n);\n\nexport const fetchGuitarAction = createAsyncThunk(\n  'data/fetchGuitar',\n  async (guitarId: number) => {\n    try {\n      const { data } = await api.get<Guitar>(`${APIRoute.Guitar}${guitarId}`);\n      store.dispatch(loadGuitar(data));\n    } catch (error) {\n      errorHandle(error);\n    }\n  },\n);\n\nexport const fetchCommentsAction = createAsyncThunk<void, number, {\n  dispatch: AppDispatch,\n  state: State,\n  extra: AxiosInstance\n}>(\n  'data/fetchComments',\n  async (guitarId, {dispatch, extra: api}) => {\n    try {\n      const { data } = await api.get<Comment[]>(`${APIRoute.Guitar}${guitarId}${APIRoute.Comments}`);\n      dispatch(loadComments(data));\n    } catch (error) {\n      errorHandle(error);\n    }\n  },\n);\n\nexport const sendCommentAction = createAsyncThunk<void, NewReview, {\n  dispatch: AppDispatch,\n  state: State,\n  extra: AxiosInstance\n}>(\n  'data/sendComment',\n  async ({ guitarId, userName, advantage, disadvantage, comment, rating }, {dispatch, extra: api} ) => {\n    try {\n      const data = { guitarId, userName, advantage, disadvantage, comment, rating };\n      await api.post<NewReview>(APIRoute.Comments, data);\n      dispatch(sendComment(false));\n    } catch (error) {\n      errorHandle(error);\n      dispatch(sendComment(true));\n    }\n  },\n);\n"]},"metadata":{},"sourceType":"module"}