{"ast":null,"code":"import { applyMiddleware } from 'redux';\nimport { isFunction, isPlainObject } from './utils';\n/**\n * A mock store for testing Redux async action creators and middleware.\n */\n\nexport function configureMockStore() {\n  let middlewares = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return mockStore;\n  /**\n   * @returns An instance of the configured mock store.\n   * @note Call this function to reset your store after every test.\n   */\n\n  function mockStore() {\n    let getState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return applyMiddleware(...middlewares)(creator)(undefined);\n\n    function creator() {\n      let actions = [];\n      const listeners = [];\n      return {\n        getState() {\n          return isFunction(getState) ? getState(actions) : getState;\n        },\n\n        getActions() {\n          return actions;\n        },\n\n        clearActions() {\n          actions = [];\n        },\n\n        dispatch(action) {\n          if (!isPlainObject(action)) {\n            throw new TypeError('Actions must be plain objects. ' + 'Use custom middleware for async actions.');\n          }\n\n          if (typeof action.type === 'undefined') {\n            throw new TypeError('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant? ' + 'Action: ' + JSON.stringify(action));\n          }\n\n          actions.push(action);\n\n          for (const listener of listeners) {\n            listener(action);\n          }\n\n          return action;\n        },\n\n        subscribe(listener) {\n          if (!isFunction(listener)) {\n            throw new TypeError('Listener must be a function.');\n          }\n\n          listeners.push(listener);\n          return unsubscribe;\n\n          function unsubscribe() {\n            const index = listeners.indexOf(listener);\n\n            if (index === -1) {\n              return;\n            }\n\n            listeners.splice(index, 1);\n          }\n        },\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        replaceReducer(_nextReducer) {\n          throw new Error('Mock stores do not support reducers. ' + 'Try supplying a function to getStore instead.');\n        },\n\n        /* istanbul ignore next */\n        [Symbol.observable]() {\n          throw new Error('Not implemented');\n        }\n\n      };\n    }\n  }\n}","map":{"version":3,"sources":["/Users/mashkust/react-starter-pack-main/node_modules/@jedmao/redux-mock-store/dist/esm/index.js"],"names":["applyMiddleware","isFunction","isPlainObject","configureMockStore","middlewares","mockStore","getState","creator","undefined","actions","listeners","getActions","clearActions","dispatch","action","TypeError","type","JSON","stringify","push","listener","subscribe","unsubscribe","index","indexOf","splice","replaceReducer","_nextReducer","Error","Symbol","observable"],"mappings":"AAAA,SAASA,eAAT,QAAiC,OAAjC;AACA,SAASC,UAAT,EAAqBC,aAArB,QAA0C,SAA1C;AACA;AACA;AACA;;AACA,OAAO,SAASC,kBAAT,GAA8C;AAAA,MAAlBC,WAAkB,uEAAJ,EAAI;AACjD,SAAOC,SAAP;AACA;AACJ;AACA;AACA;;AACI,WAASA,SAAT,GAAkC;AAAA,QAAfC,QAAe,uEAAJ,EAAI;AAC9B,WAAON,eAAe,CAAC,GAAGI,WAAJ,CAAf,CAAgCG,OAAhC,EAAyCC,SAAzC,CAAP;;AACA,aAASD,OAAT,GAAmB;AACf,UAAIE,OAAO,GAAG,EAAd;AACA,YAAMC,SAAS,GAAG,EAAlB;AACA,aAAO;AACHJ,QAAAA,QAAQ,GAAG;AACP,iBAAOL,UAAU,CAACK,QAAD,CAAV,GAAuBA,QAAQ,CAACG,OAAD,CAA/B,GAA2CH,QAAlD;AACH,SAHE;;AAIHK,QAAAA,UAAU,GAAG;AACT,iBAAOF,OAAP;AACH,SANE;;AAOHG,QAAAA,YAAY,GAAG;AACXH,UAAAA,OAAO,GAAG,EAAV;AACH,SATE;;AAUHI,QAAAA,QAAQ,CAACC,MAAD,EAAS;AACb,cAAI,CAACZ,aAAa,CAACY,MAAD,CAAlB,EAA4B;AACxB,kBAAM,IAAIC,SAAJ,CAAc,oCAChB,0CADE,CAAN;AAEH;;AACD,cAAI,OAAOD,MAAM,CAACE,IAAd,KAAuB,WAA3B,EAAwC;AACpC,kBAAM,IAAID,SAAJ,CAAc,wDAChB,kCADgB,GAEhB,UAFgB,GAGhBE,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAHE,CAAN;AAIH;;AACDL,UAAAA,OAAO,CAACU,IAAR,CAAaL,MAAb;;AACA,eAAK,MAAMM,QAAX,IAAuBV,SAAvB,EAAkC;AAC9BU,YAAAA,QAAQ,CAACN,MAAD,CAAR;AACH;;AACD,iBAAOA,MAAP;AACH,SA1BE;;AA2BHO,QAAAA,SAAS,CAACD,QAAD,EAAW;AAChB,cAAI,CAACnB,UAAU,CAACmB,QAAD,CAAf,EAA2B;AACvB,kBAAM,IAAIL,SAAJ,CAAc,8BAAd,CAAN;AACH;;AACDL,UAAAA,SAAS,CAACS,IAAV,CAAeC,QAAf;AACA,iBAAOE,WAAP;;AACA,mBAASA,WAAT,GAAuB;AACnB,kBAAMC,KAAK,GAAGb,SAAS,CAACc,OAAV,CAAkBJ,QAAlB,CAAd;;AACA,gBAAIG,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd;AACH;;AACDb,YAAAA,SAAS,CAACe,MAAV,CAAiBF,KAAjB,EAAwB,CAAxB;AACH;AACJ,SAxCE;;AAyCH;AACAG,QAAAA,cAAc,CAACC,YAAD,EAAe;AACzB,gBAAM,IAAIC,KAAJ,CAAU,0CACZ,+CADE,CAAN;AAEH,SA7CE;;AA8CH;AACA,SAACC,MAAM,CAACC,UAAR,IAAsB;AAClB,gBAAM,IAAIF,KAAJ,CAAU,iBAAV,CAAN;AACH;;AAjDE,OAAP;AAmDH;AACJ;AACJ","sourcesContent":["import { applyMiddleware, } from 'redux';\nimport { isFunction, isPlainObject } from './utils';\n/**\n * A mock store for testing Redux async action creators and middleware.\n */\nexport function configureMockStore(middlewares = []) {\n    return mockStore;\n    /**\n     * @returns An instance of the configured mock store.\n     * @note Call this function to reset your store after every test.\n     */\n    function mockStore(getState = {}) {\n        return applyMiddleware(...middlewares)(creator)(undefined);\n        function creator() {\n            let actions = [];\n            const listeners = [];\n            return {\n                getState() {\n                    return isFunction(getState) ? getState(actions) : getState;\n                },\n                getActions() {\n                    return actions;\n                },\n                clearActions() {\n                    actions = [];\n                },\n                dispatch(action) {\n                    if (!isPlainObject(action)) {\n                        throw new TypeError('Actions must be plain objects. ' +\n                            'Use custom middleware for async actions.');\n                    }\n                    if (typeof action.type === 'undefined') {\n                        throw new TypeError('Actions may not have an undefined \"type\" property. ' +\n                            'Have you misspelled a constant? ' +\n                            'Action: ' +\n                            JSON.stringify(action));\n                    }\n                    actions.push(action);\n                    for (const listener of listeners) {\n                        listener(action);\n                    }\n                    return action;\n                },\n                subscribe(listener) {\n                    if (!isFunction(listener)) {\n                        throw new TypeError('Listener must be a function.');\n                    }\n                    listeners.push(listener);\n                    return unsubscribe;\n                    function unsubscribe() {\n                        const index = listeners.indexOf(listener);\n                        if (index === -1) {\n                            return;\n                        }\n                        listeners.splice(index, 1);\n                    }\n                },\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                replaceReducer(_nextReducer) {\n                    throw new Error('Mock stores do not support reducers. ' +\n                        'Try supplying a function to getStore instead.');\n                },\n                /* istanbul ignore next */\n                [Symbol.observable]() {\n                    throw new Error('Not implemented');\n                },\n            };\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}