{"ast":null,"code":"import request from 'axios';\nimport { toast } from 'react-toastify';\nimport { HTTP_CODE } from '../const';\nexport const errorHandle = error => {\n  if (!request.isAxiosError(error)) {\n    throw error;\n  }\n\n  const {\n    response\n  } = error;\n  console.log(response);\n\n  if (response) {\n    switch (response.status) {\n      case HTTP_CODE.BAD_REQUEST:\n        toast.info(response.data.error);\n        break;\n\n      case HTTP_CODE.UNAUTHORIZED:\n        toast.info(response.data.error);\n        break;\n\n      case HTTP_CODE.NOT_FOUND:\n        toast.error(response.data.error);\n        break;\n    }\n  }\n};","map":{"version":3,"sources":["/Users/mashkust/react-starter-pack-main/src/services/error-handle.ts"],"names":["request","toast","HTTP_CODE","errorHandle","error","isAxiosError","response","console","log","status","BAD_REQUEST","info","data","UNAUTHORIZED","NOT_FOUND"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AAEA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAAQC,SAAR,QAAwB,UAAxB;AAEA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAA4B;AACrD,MAAI,CAACJ,OAAO,CAACK,YAAR,CAAqBD,KAArB,CAAL,EAAkC;AAChC,UAAMA,KAAN;AACD;;AAED,QAAM;AAACE,IAAAA;AAAD,MAAaF,KAAnB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AACA,MAAIA,QAAJ,EAAc;AACZ,YAAQA,QAAQ,CAACG,MAAjB;AACE,WAAKP,SAAS,CAACQ,WAAf;AACET,QAAAA,KAAK,CAACU,IAAN,CAAWL,QAAQ,CAACM,IAAT,CAAcR,KAAzB;AACA;;AACF,WAAKF,SAAS,CAACW,YAAf;AACEZ,QAAAA,KAAK,CAACU,IAAN,CAAWL,QAAQ,CAACM,IAAT,CAAcR,KAAzB;AACA;;AACF,WAAKF,SAAS,CAACY,SAAf;AACEb,QAAAA,KAAK,CAACG,KAAN,CAAYE,QAAQ,CAACM,IAAT,CAAcR,KAA1B;AACA;AATJ;AAWD;AACF,CApBM","sourcesContent":["import request from 'axios';\nimport { ErrorType } from '../types/types';\nimport { toast } from 'react-toastify';\nimport {HTTP_CODE} from '../const';\n\nexport const errorHandle = (error: ErrorType): void => {\n  if (!request.isAxiosError(error)) {\n    throw error;\n  }\n\n  const {response} = error;\n  console.log(response);\n  if (response) {\n    switch (response.status) {\n      case HTTP_CODE.BAD_REQUEST:\n        toast.info(response.data.error);\n        break;\n      case HTTP_CODE.UNAUTHORIZED:\n        toast.info(response.data.error);\n        break;\n      case HTTP_CODE.NOT_FOUND:\n        toast.error(response.data.error);\n        break;\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}