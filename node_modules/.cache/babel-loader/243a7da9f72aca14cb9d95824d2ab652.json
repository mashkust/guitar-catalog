{"ast":null,"code":"import request from 'axios';\nimport { toast } from 'react-toastify';\nimport { HTTP_CODE } from '../const';\nimport { Offline } from 'offline-js';\nexport const errorHandle = error => {\n  if (!request.isAxiosError(error)) {\n    throw error;\n  }\n\n  console.log(Offline.check());\n  const {\n    response\n  } = error;\n\n  if (response) {\n    switch (response.status) {\n      case HTTP_CODE.BAD_REQUEST:\n        toast.info(response.data.error);\n        break;\n\n      case HTTP_CODE.UNAUTHORIZED:\n        toast.info(response.data.error);\n        break;\n\n      case HTTP_CODE.NOT_FOUND:\n        toast.info(response.data.error);\n        break;\n    }\n  }\n};","map":{"version":3,"sources":["/Users/mashkust/react-starter-pack-main/src/services/error-handle.ts"],"names":["request","toast","HTTP_CODE","Offline","errorHandle","error","isAxiosError","console","log","check","response","status","BAD_REQUEST","info","data","UNAUTHORIZED","NOT_FOUND"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AAEA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAAQC,SAAR,QAAwB,UAAxB;AACA,SAAQC,OAAR,QAAsB,YAAtB;AAEA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAA4B;AACrD,MAAI,CAACL,OAAO,CAACM,YAAR,CAAqBD,KAArB,CAAL,EAAkC;AAChC,UAAMA,KAAN;AACD;;AACFE,EAAAA,OAAO,CAACC,GAAR,CAAYL,OAAO,CAACM,KAAR,EAAZ;AAEC,QAAM;AAACC,IAAAA;AAAD,MAAaL,KAAnB;;AAEA,MAAIK,QAAJ,EAAc;AACZ,YAAQA,QAAQ,CAACC,MAAjB;AACE,WAAKT,SAAS,CAACU,WAAf;AACEX,QAAAA,KAAK,CAACY,IAAN,CAAWH,QAAQ,CAACI,IAAT,CAAcT,KAAzB;AACA;;AACF,WAAKH,SAAS,CAACa,YAAf;AACEd,QAAAA,KAAK,CAACY,IAAN,CAAWH,QAAQ,CAACI,IAAT,CAAcT,KAAzB;AACA;;AACF,WAAKH,SAAS,CAACc,SAAf;AACEf,QAAAA,KAAK,CAACY,IAAN,CAAWH,QAAQ,CAACI,IAAT,CAAcT,KAAzB;AACA;AATJ;AAWD;AACF,CArBM","sourcesContent":["import request from 'axios';\nimport { ErrorType } from '../types/types';\nimport { toast } from 'react-toastify';\nimport {HTTP_CODE} from '../const';\nimport {Offline} from 'offline-js';\n\nexport const errorHandle = (error: ErrorType): void => {\n  if (!request.isAxiosError(error)) {\n    throw error;\n  }\n console.log(Offline.check());\n\n  const {response} = error;\n\n  if (response) {\n    switch (response.status) {\n      case HTTP_CODE.BAD_REQUEST:\n        toast.info(response.data.error);\n        break;\n      case HTTP_CODE.UNAUTHORIZED:\n        toast.info(response.data.error);\n        break;\n      case HTTP_CODE.NOT_FOUND:\n        toast.info(response.data.error);\n        break;\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}