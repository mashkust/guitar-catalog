{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { loadComments, loadGuitar, loadGuitars, sendComment } from './guitar-data';\nimport { errorHandle } from '../services/error-handle';\nimport { APIRoute } from '../const';\nexport const fetchGuitarsAction = createAsyncThunk('data/fetchGuitars', async (_arg, _ref) => {\n  let {\n    dispatch,\n    extra: api\n  } = _ref;\n\n  try {\n    const {\n      data\n    } = await api.get(APIRoute.Guitars);\n    dispatch(loadGuitars(data));\n  } catch (error) {\n    errorHandle(error);\n  }\n});\nexport const fetchGuitarAction = createAsyncThunk('data/fetchGuitar', async (guitarId, _ref2) => {\n  let {\n    dispatch,\n    extra: api\n  } = _ref2;\n\n  try {\n    const {\n      data\n    } = await api.get(`${APIRoute.Guitar}${guitarId}`);\n    dispatch(loadGuitar(data));\n  } catch (error) {\n    errorHandle(error);\n  }\n});\nexport const fetchCommentsAction = createAsyncThunk('data/fetchComments', async (guitarId, _ref3) => {\n  let {\n    dispatch,\n    extra: api\n  } = _ref3;\n\n  try {\n    const {\n      data\n    } = await api.get(`${APIRoute.Guitar}${guitarId}${APIRoute.Comments}`);\n    dispatch(loadComments(data));\n  } catch (error) {\n    errorHandle(error);\n  }\n});\nexport const sendCommentAction = createAsyncThunk('data/sendComment', async (_ref4, _ref5) => {\n  let {\n    guitarId,\n    userName,\n    advantage,\n    disadvantage,\n    comment,\n    rating\n  } = _ref4;\n  let {\n    dispatch,\n    extra: api\n  } = _ref5;\n\n  try {\n    const data = {\n      guitarId,\n      userName,\n      advantage,\n      disadvantage,\n      comment,\n      rating\n    };\n    await api.post(APIRoute.Comments, data);\n    dispatch(sendComment(false));\n  } catch (error) {\n    errorHandle(error);\n    dispatch(sendComment(false));\n  }\n});\nexport const postOrdersAction = createAsyncThunk('data/postOrders', async (_ref6, _ref7) => {\n  let {\n    guitarsIds,\n    coupon\n  } = _ref6;\n  let {\n    dispatch,\n    extra: api\n  } = _ref7;\n\n  try {\n    const data = {\n      guitarsIds,\n      coupon\n    };\n    await api.post(APIRoute.Orders, data);\n  } catch (error) {\n    errorHandle(error);\n  }\n});\nexport const postCouponAction = createAsyncThunk('data/postCoupon', async (_ref8, _ref9) => {\n  let {\n    coupon\n  } = _ref8;\n  let {\n    dispatch,\n    extra: api\n  } = _ref9;\n\n  try {\n    const data = {\n      coupon\n    };\n    await api.post(APIRoute.Coupon, data);\n  } catch (error) {\n    errorHandle(error);\n  }\n});","map":{"version":3,"sources":["/Users/mashkust/react-starter-pack-main/src/store/api-actions.ts"],"names":["createAsyncThunk","loadComments","loadGuitar","loadGuitars","sendComment","errorHandle","APIRoute","fetchGuitarsAction","_arg","dispatch","extra","api","data","get","Guitars","error","fetchGuitarAction","guitarId","Guitar","fetchCommentsAction","Comments","sendCommentAction","userName","advantage","disadvantage","comment","rating","post","postOrdersAction","guitarsIds","coupon","Orders","postCouponAction","Coupon"],"mappings":"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","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { Guitar, NewReview, Comment, AppDispatch, State, NewOrders, CouponTypes, CouponPost } from '../types/types';\nimport { loadComments, loadGuitar, loadGuitars, sendComment } from './guitar-data';\nimport { errorHandle } from '../services/error-handle';\nimport { APIRoute } from '../const';\nimport { AxiosInstance } from 'axios';\n\n\nexport const fetchGuitarsAction = createAsyncThunk<void, undefined, {\n  dispatch: AppDispatch,\n  state: State,\n  extra: AxiosInstance\n}>(\n  'data/fetchGuitars',\n  async (_arg, { dispatch, extra: api }) => {\n    try {\n      const { data } = await api.get<Guitar[]>(APIRoute.Guitars);\n      dispatch(loadGuitars(data));\n    } catch (error) {\n      errorHandle(error);\n    }\n  },\n);\n\nexport const fetchGuitarAction = createAsyncThunk<void, number, {\n  dispatch: AppDispatch,\n  state: State,\n  extra: AxiosInstance\n}>(\n  'data/fetchGuitar',\n  async (guitarId, { dispatch, extra: api }) => {\n    try {\n      const { data } = await api.get<Guitar>(`${APIRoute.Guitar}${guitarId}`);\n      dispatch(loadGuitar(data));\n    } catch (error) {\n      errorHandle(error);\n    }\n  },\n);\n\nexport const fetchCommentsAction = createAsyncThunk<void, number, {\n  dispatch: AppDispatch,\n  state: State,\n  extra: AxiosInstance\n}>(\n  'data/fetchComments',\n  async (guitarId, { dispatch, extra: api }) => {\n    try {\n      const { data } = await api.get<Comment[]>(`${APIRoute.Guitar}${guitarId}${APIRoute.Comments}`);\n      dispatch(loadComments(data));\n    } catch (error) {\n      errorHandle(error);\n    }\n  },\n);\n\nexport const sendCommentAction = createAsyncThunk<void, NewReview, {\n  dispatch: AppDispatch,\n  state: State,\n  extra: AxiosInstance\n}>(\n  'data/sendComment',\n  async ({ guitarId, userName, advantage, disadvantage, comment, rating }, { dispatch, extra: api }) => {\n    try {\n      const data = { guitarId, userName, advantage, disadvantage, comment, rating };\n      await api.post<NewReview>(APIRoute.Comments, data);\n      dispatch(sendComment(false));\n    } catch (error) {\n      errorHandle(error);\n      dispatch(sendComment(false));\n    }\n  },\n);\n\nexport const postOrdersAction = createAsyncThunk<void, NewOrders, {\n  dispatch: AppDispatch,\n  state: State,\n  extra: AxiosInstance\n}>(\n  'data/postOrders',\n  async ({ guitarsIds, coupon }, { dispatch, extra: api }) => {\n    try {\n      const data = { guitarsIds, coupon };\n      await api.post<NewOrders>(APIRoute.Orders, data);\n    } catch (error) {\n      errorHandle(error);\n    }\n  },\n);\n\nexport const postCouponAction = createAsyncThunk<void, CouponPost, {\n  dispatch: AppDispatch,\n  state: State,\n  extra: AxiosInstance\n}>(\n  'data/postCoupon',\n  async ({ coupon }, { dispatch, extra: api }) => {\n    try {\n      const data = { coupon };\n      await api.post<CouponPost>(APIRoute.Coupon, data);\n    } catch (error) {\n      errorHandle(error);\n    }\n  },\n);\n"]},"metadata":{},"sourceType":"module"}