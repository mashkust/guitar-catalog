{"ast":null,"code":"import { name, random } from 'faker';\nimport { COMMENT_CARDS_COUNT, TYPES } from './const';\nimport { configureMockStore } from '@jedmao/redux-mock-store';\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport const makeFakeComment = () => ({\n  guitarId: getRandomInt(0, 27),\n  userName: name.title(),\n  advantage: random.words(),\n  disadvantage: random.words(),\n  comment: random.words(),\n  rating: getRandomInt(0, 6)\n});\nexport const makeFakeGuitar = _ref => {\n  let {\n    testName\n  } = _ref;\n  return {\n    id: getRandomInt(0, 27),\n    name: testName !== null && testName !== void 0 ? testName : random.word(),\n    vendorCode: random.word(),\n    type: TYPES.electric,\n    previewImg: '',\n    price: getRandomInt(0, 100000),\n    description: random.words(),\n    rating: getRandomInt(0, 6),\n    stringCount: getRandomInt(0, 8)\n  };\n};\nconst mockStore = configureMockStore();\nexport const fakeStore = mockStore({\n  DATA: {\n    guitars: [makeFakeGuitar({}), makeFakeGuitar({})],\n    guitar: makeFakeGuitar({}),\n    comments: makeFakeComment(),\n    isDataLoaded: true,\n    isDataSending: false\n  },\n  COMMENT: {\n    commentCardsCount: COMMENT_CARDS_COUNT\n  }\n});\nexport const fakeGuitars = [makeFakeGuitar({\n  testName: 'Test guitar'\n}), makeFakeGuitar({}), makeFakeGuitar({})];","map":{"version":3,"sources":["/Users/mashkust/react-starter-pack-main/src/mock.ts"],"names":["name","random","COMMENT_CARDS_COUNT","TYPES","configureMockStore","getRandomInt","min","max","Math","ceil","floor","makeFakeComment","guitarId","userName","title","advantage","words","disadvantage","comment","rating","makeFakeGuitar","testName","id","word","vendorCode","type","electric","previewImg","price","description","stringCount","mockStore","fakeStore","DATA","guitars","guitar","comments","isDataLoaded","isDataSending","COMMENT","commentCardsCount","fakeGuitars"],"mappings":"AAAA,SAAQA,IAAR,EAAcC,MAAd,QAA4B,OAA5B;AACA,SAASC,mBAAT,EAA8BC,KAA9B,QAA2C,SAA3C;AAEA,SAAQC,kBAAR,QAAiC,0BAAjC;;AAEA,SAASC,YAAT,CAAsBC,GAAtB,EAAmCC,GAAnC,EAAgD;AAC9CD,EAAAA,GAAG,GAAGE,IAAI,CAACC,IAAL,CAAUH,GAAV,CAAN;AACAC,EAAAA,GAAG,GAAGC,IAAI,CAACE,KAAL,CAAWH,GAAX,CAAN;AACA,SAAOC,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACP,MAAL,MAAiBM,GAAG,GAAGD,GAAvB,CAAX,IAA0CA,GAAjD;AACD;;AAED,OAAO,MAAMK,eAAe,GAAG,OAAiB;AAC9CC,EAAAA,QAAQ,EAAEP,YAAY,CAAC,CAAD,EAAG,EAAH,CADwB;AAE9CQ,EAAAA,QAAQ,EAAEb,IAAI,CAACc,KAAL,EAFoC;AAG9CC,EAAAA,SAAS,EAAEd,MAAM,CAACe,KAAP,EAHmC;AAI9CC,EAAAA,YAAY,EAAEhB,MAAM,CAACe,KAAP,EAJgC;AAK9CE,EAAAA,OAAO,EAAEjB,MAAM,CAACe,KAAP,EALqC;AAM9CG,EAAAA,MAAM,EAAEd,YAAY,CAAC,CAAD,EAAG,CAAH;AAN0B,CAAjB,CAAxB;AAaP,OAAO,MAAMe,cAAc,GAAG;AAAA,MAAC;AAACC,IAAAA;AAAD,GAAD;AAAA,SAA4C;AACxEC,IAAAA,EAAE,EAAGjB,YAAY,CAAC,CAAD,EAAG,EAAH,CADuD;AAExEL,IAAAA,IAAI,EAAEqB,QAAF,aAAEA,QAAF,cAAEA,QAAF,GAAcpB,MAAM,CAACsB,IAAP,EAFsD;AAGxEC,IAAAA,UAAU,EAAEvB,MAAM,CAACsB,IAAP,EAH4D;AAIxEE,IAAAA,IAAI,EAAEtB,KAAK,CAACuB,QAJ4D;AAKxEC,IAAAA,UAAU,EAAE,EAL4D;AAMxEC,IAAAA,KAAK,EAAEvB,YAAY,CAAC,CAAD,EAAG,MAAH,CANqD;AAOxEwB,IAAAA,WAAW,EAAE5B,MAAM,CAACe,KAAP,EAP2D;AAQxEG,IAAAA,MAAM,EAAEd,YAAY,CAAC,CAAD,EAAG,CAAH,CARoD;AASxEyB,IAAAA,WAAW,EAAEzB,YAAY,CAAC,CAAD,EAAG,CAAH;AAT+C,GAA5C;AAAA,CAAvB;AAYP,MAAM0B,SAAS,GAAG3B,kBAAkB,EAApC;AAEA,OAAO,MAAM4B,SAAS,GAAGD,SAAS,CAAC;AACjCE,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE,CAACd,cAAc,CAAC,EAAD,CAAf,EAAoBA,cAAc,CAAC,EAAD,CAAlC,CADL;AAEJe,IAAAA,MAAM,EAAEf,cAAc,CAAC,EAAD,CAFlB;AAGJgB,IAAAA,QAAQ,EAAEzB,eAAe,EAHrB;AAIJ0B,IAAAA,YAAY,EAAE,IAJV;AAKJC,IAAAA,aAAa,EAAE;AALX,GAD2B;AAOjCC,EAAAA,OAAO,EAAE;AAACC,IAAAA,iBAAiB,EAAEtC;AAApB;AAPwB,CAAD,CAA3B;AAUP,OAAO,MAAMuC,WAAW,GAAG,CAACrB,cAAc,CAAC;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAD,CAAf,EAA6CD,cAAc,CAAC,EAAD,CAA3D,EAAgEA,cAAc,CAAC,EAAD,CAA9E,CAApB","sourcesContent":["import {name, random } from 'faker';\nimport { COMMENT_CARDS_COUNT, TYPES } from './const';\nimport { Guitar, NewReview } from './types/types';\nimport {configureMockStore} from '@jedmao/redux-mock-store';\n\nfunction getRandomInt(min: number, max: number) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport const makeFakeComment = ():NewReview => ({\n  guitarId: getRandomInt(0,27),\n  userName: name.title(),\n  advantage: random.words(),\n  disadvantage: random.words(),\n  comment: random.words(),\n  rating: getRandomInt(0,6),\n});\n\nexport interface makeFakeGuitarProps {\n  testName?: string,\n}\n\nexport const makeFakeGuitar = ({testName}:makeFakeGuitarProps):Guitar => ({\n  id:  getRandomInt(0,27),\n  name: testName ?? random.word(),\n  vendorCode: random.word(),\n  type: TYPES.electric,\n  previewImg: '',\n  price: getRandomInt(0,100000),\n  description: random.words(),\n  rating: getRandomInt(0,6),\n  stringCount: getRandomInt(0,8),\n});\n\nconst mockStore = configureMockStore();\n\nexport const fakeStore = mockStore({\n  DATA: {\n    guitars: [makeFakeGuitar({}),makeFakeGuitar({})],\n    guitar: makeFakeGuitar({}),\n    comments: makeFakeComment(),\n    isDataLoaded: true,\n    isDataSending: false},\n  COMMENT: {commentCardsCount: COMMENT_CARDS_COUNT},\n});\n\nexport const fakeGuitars = [makeFakeGuitar({ testName: 'Test guitar' }),makeFakeGuitar({}),makeFakeGuitar({})];\n"]},"metadata":{},"sourceType":"module"}