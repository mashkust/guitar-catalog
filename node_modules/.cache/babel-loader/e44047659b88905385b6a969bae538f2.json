{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { NameSpace } from '../const';\nimport { sortByParams } from '../utils';\nconst initialState = {\n  guitars: [],\n  guitar: null,\n  comments: null,\n  isDataLoaded: false,\n  isDataSending: false,\n  isSuccessModalOpened: false,\n  isCommentModalOpened: false,\n  isSorting: null,\n  isSortInc: null,\n  minPrice: null,\n  maxPrice: null,\n  selectedTypes: [],\n  selectedStrings: [],\n  filteredGuitarsLength: null,\n  filteredPriceMin: null,\n  filteredPriceMax: null\n};\nexport const guitarData = createSlice({\n  name: NameSpace.data,\n  initialState,\n  reducers: {\n    setIsSuccessModalOpened: (state, action) => {\n      state.isSuccessModalOpened = action.payload;\n    },\n    setIsCommentModalOpened: (state, action) => {\n      state.isCommentModalOpened = action.payload;\n    },\n    setIsSorting: (state, action) => {\n      state.isSorting = action.payload;\n\n      if (state.isSortInc === null) {\n        state.isSortInc = true;\n      }\n\n      const {\n        guitars,\n        isSortInc,\n        isSorting\n      } = state;\n      state.guitars = sortByParams({\n        guitars,\n        isSortInc,\n        isSorting\n      });\n      window.localStorage.setItem('sortType', String(isSorting));\n      window.localStorage.setItem('sortDirection', String(isSortInc)); // hashHistory.push({\n      //   search: `sortType=${state.isSorting}&sortDirection=${state.isSortInc}&priceMin=${state.minPrice}`,\n      // });\n    },\n    setIsSortInc: (state, action) => {\n      state.isSortInc = action.payload;\n\n      if (state.isSorting === null) {\n        state.isSorting = 'price';\n      }\n\n      const {\n        guitars,\n        isSortInc,\n        isSorting\n      } = state;\n      state.guitars = sortByParams({\n        guitars,\n        isSortInc,\n        isSorting\n      });\n      window.localStorage.setItem('sortType', String(isSorting));\n      window.localStorage.setItem('sortDirection', String(isSortInc)); // hashHistory.push({\n      //   search: `sortType=${isSorting}&sortDirection=${isSortInc}&priceMin=${state.minPrice}`,\n      // });\n    },\n    loadGuitars: (state, action) => {\n      state.guitars = action.payload;\n      state.isDataLoaded = true;\n    },\n    loadGuitar: (state, action) => {\n      state.guitar = action.payload;\n    },\n    loadComments: (state, action) => {\n      state.comments = action.payload.sort((a, b) => new Date(b.createAt).getTime() - new Date(a.createAt).getTime());\n\n      if (action.payload[0]) {\n        const first = action.payload[0];\n\n        if (action.payload.every(el => Number(el.guitarId) === Number(first.guitarId))) {\n          const guitar = state.guitars.find(el => Number(el.id) === Number(first.guitarId));\n\n          if (guitar) {\n            guitar.commentsCount = action.payload.length;\n          }\n        }\n      }\n    },\n    sendComment: (state, action) => {\n      state.isDataSending = action.payload;\n    },\n    setMinPrice: (state, action) => {\n      state.minPrice = action.payload; // window.localStorage.setItem('priceMin',String(state.minPrice));\n      // hashHistory.push({\n      //   search: `sortType=${state.isSorting}&sortDirection=${state.isSortInc}&priceMin=${state.minPrice}`,\n      // });\n    },\n    setMaxPrice: (state, action) => {\n      state.maxPrice = action.payload;\n    },\n    setSelectedTypes: (state, action) => {\n      const {\n        selectedTypes\n      } = state;\n      const {\n        payload\n      } = action;\n\n      if (!payload) {\n        state.selectedTypes = [];\n      } else {\n        if (selectedTypes.includes(payload)) {\n          state.selectedTypes = selectedTypes.filter(el => el !== payload);\n        } else {\n          selectedTypes.push(payload);\n        }\n\n        let fUkulele = [];\n        let fElectric = [];\n        let fAcoustc = [];\n\n        if (state.selectedTypes.length > 0) {\n          if (state.selectedTypes.includes('electric')) {\n            fElectric = state.selectedStrings.filter(el => el < 12);\n          }\n\n          if (state.selectedTypes.includes('ukulele')) {\n            fUkulele = state.selectedStrings.filter(el => el < 6);\n          }\n\n          if (state.selectedTypes.includes('acoustic')) {\n            fAcoustc = state.selectedStrings.filter(el => el > 4);\n          }\n\n          state.selectedStrings = Array.from(new Set([...fElectric, ...fUkulele, ...fAcoustc]));\n        }\n      }\n    },\n    setSelectedStrings: (state, action) => {\n      const {\n        selectedStrings\n      } = state;\n      const {\n        payload\n      } = action;\n\n      if (!payload) {\n        state.selectedStrings = [];\n      } else {\n        if (selectedStrings.includes(payload)) {\n          state.selectedStrings = selectedStrings.filter(el => el !== payload);\n        } else {\n          selectedStrings.push(payload);\n        }\n      }\n    },\n    setFilteredGuitarsLength: (state, action) => {\n      state.filteredGuitarsLength = action.payload;\n    },\n    setFilteredPriceMin: (state, action) => {\n      state.filteredPriceMin = action.payload;\n    },\n    setFilteredPriceMax: (state, action) => {\n      state.filteredPriceMax = action.payload;\n    }\n  }\n});\nexport const {\n  loadGuitars,\n  loadGuitar,\n  loadComments,\n  sendComment,\n  setIsSuccessModalOpened,\n  setIsCommentModalOpened,\n  setIsSorting,\n  setIsSortInc,\n  setMinPrice,\n  setMaxPrice,\n  setSelectedTypes,\n  setSelectedStrings,\n  setFilteredGuitarsLength,\n  filteredPriceMin,\n  filteredPriceMax\n} = guitarData.actions;","map":{"version":3,"sources":["/Users/mashkust/react-starter-pack-main/src/store/guitar-data.ts"],"names":["createSlice","NameSpace","sortByParams","initialState","guitars","guitar","comments","isDataLoaded","isDataSending","isSuccessModalOpened","isCommentModalOpened","isSorting","isSortInc","minPrice","maxPrice","selectedTypes","selectedStrings","filteredGuitarsLength","filteredPriceMin","filteredPriceMax","guitarData","name","data","reducers","setIsSuccessModalOpened","state","action","payload","setIsCommentModalOpened","setIsSorting","window","localStorage","setItem","String","setIsSortInc","loadGuitars","loadGuitar","loadComments","sort","a","b","Date","createAt","getTime","first","every","el","Number","guitarId","find","id","commentsCount","length","sendComment","setMinPrice","setMaxPrice","setSelectedTypes","includes","filter","push","fUkulele","fElectric","fAcoustc","Array","from","Set","setSelectedStrings","setFilteredGuitarsLength","setFilteredPriceMin","setFilteredPriceMax","actions"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { GuitarData, GuitarTypes, PriceMin, SortType } from '../types/types';\nimport { NameSpace } from '../const';\nimport type { Comment } from './../types/types';\nimport { sortByParams } from '../utils';\nimport hashHistory from '../hash-history';\nconst initialState: GuitarData = {\n  guitars: [],\n  guitar: null,\n  comments: null,\n  isDataLoaded: false,\n  isDataSending: false,\n  isSuccessModalOpened: false,\n  isCommentModalOpened: false,\n  isSorting: null,\n  isSortInc: null,\n  minPrice: null,\n  maxPrice: null,\n  selectedTypes: [],\n  selectedStrings: [],\n  filteredGuitarsLength: null,\n  filteredPriceMin:null,\n  filteredPriceMax:null,\n};\n\nexport const guitarData = createSlice({\n  name: NameSpace.data,\n  initialState,\n  reducers: {\n    setIsSuccessModalOpened: (state, action: { payload: boolean }) => {\n      state.isSuccessModalOpened = action.payload;\n    },\n    setIsCommentModalOpened: (state, action: { payload: boolean }) => {\n      state.isCommentModalOpened = action.payload;\n    },\n    setIsSorting: (state, action: { payload: SortType }) => {\n      state.isSorting = action.payload;\n      if (state.isSortInc === null) {\n        state.isSortInc = true;\n      }\n      const { guitars, isSortInc, isSorting } = state;\n      state.guitars = sortByParams({ guitars, isSortInc, isSorting });\n      window.localStorage.setItem('sortType',String(isSorting));\n      window.localStorage.setItem('sortDirection',String(isSortInc));\n      // hashHistory.push({\n      //   search: `sortType=${state.isSorting}&sortDirection=${state.isSortInc}&priceMin=${state.minPrice}`,\n      // });\n    },\n    setIsSortInc: (state, action: { payload: boolean }) => {\n      state.isSortInc = action.payload;\n      if (state.isSorting === null) {\n        state.isSorting = 'price';\n      }\n      const { guitars, isSortInc, isSorting } = state;\n      state.guitars = sortByParams({ guitars, isSortInc, isSorting });\n      window.localStorage.setItem('sortType',String(isSorting));\n      window.localStorage.setItem('sortDirection',String(isSortInc));\n      // hashHistory.push({\n      //   search: `sortType=${isSorting}&sortDirection=${isSortInc}&priceMin=${state.minPrice}`,\n      // });\n    },\n    loadGuitars: (state, action) => {\n      state.guitars = action.payload;\n      state.isDataLoaded = true;\n    },\n    loadGuitar: (state, action) => {\n      state.guitar = action.payload;\n    },\n    loadComments: (state, action: { payload: Comment[] }) => {\n      state.comments = action.payload.sort((a, b) => new Date(b.createAt).getTime() - new Date(a.createAt).getTime());\n      if (action.payload[0]) {\n        const first = action.payload[0];\n        if (action.payload.every((el) => Number(el.guitarId) === Number(first.guitarId))) {\n          const guitar = state.guitars.find((el) => Number(el.id) === Number(first.guitarId));\n          if (guitar) {\n            guitar.commentsCount = action.payload.length;\n          }\n        }\n      }\n    },\n    sendComment: (state, action) => {\n      state.isDataSending = action.payload;\n    },\n    setMinPrice: (state, action:{ payload: string | null}) => {\n      state.minPrice = action.payload;\n      // window.localStorage.setItem('priceMin',String(state.minPrice));\n      // hashHistory.push({\n      //   search: `sortType=${state.isSorting}&sortDirection=${state.isSortInc}&priceMin=${state.minPrice}`,\n      // });\n    },\n    setMaxPrice: (state, action) => {\n      state.maxPrice = action.payload;\n    },\n    setSelectedTypes: (state, action: { payload: GuitarTypes | null }) => {\n      const { selectedTypes } = state;\n      const { payload } = action;\n      if (!payload) {\n        state.selectedTypes = [];\n      } else {\n        if (selectedTypes.includes(payload)) {\n          state.selectedTypes = selectedTypes.filter((el) => el !== payload);\n        }\n        else {\n          selectedTypes.push(payload);\n        }\n        let fUkulele: number[] = [];\n        let fElectric: number[] = [];\n        let fAcoustc: number[] = [];\n        if (state.selectedTypes.length > 0) {\n          if (state.selectedTypes.includes('electric')) {\n            fElectric = state.selectedStrings.filter((el) => el < 12);\n          }\n          if (state.selectedTypes.includes('ukulele')) {\n            fUkulele = state.selectedStrings.filter((el) => el < 6);\n          }\n          if (state.selectedTypes.includes('acoustic')) {\n            fAcoustc = state.selectedStrings.filter((el) => el > 4);\n          }\n          state.selectedStrings = Array.from(new Set([...fElectric, ...fUkulele, ...fAcoustc]));\n        }\n      }\n    },\n    setSelectedStrings: (state, action: { payload: number | null }) => {\n      const { selectedStrings } = state;\n      const { payload } = action;\n      if (!payload) {\n        state.selectedStrings = [];\n      } else {\n        if (selectedStrings.includes(payload)) {\n          state.selectedStrings = selectedStrings.filter((el) => el !== payload);\n        }\n        else {\n          selectedStrings.push(payload);\n        }\n      }\n    },\n    setFilteredGuitarsLength: (state, action) => {\n      state.filteredGuitarsLength = action.payload;\n    },\n    setFilteredPriceMin: (state, action) => {\n      state.filteredPriceMin = action.payload;\n    },\n    setFilteredPriceMax: (state, action) => {\n      state.filteredPriceMax = action.payload;\n    },\n  },\n});\n\nexport const {\n  loadGuitars,\n  loadGuitar,\n  loadComments,\n  sendComment,\n  setIsSuccessModalOpened,\n  setIsCommentModalOpened,\n  setIsSorting,\n  setIsSortInc,\n  setMinPrice,\n  setMaxPrice,\n  setSelectedTypes,\n  setSelectedStrings,\n  setFilteredGuitarsLength,\n  filteredPriceMin,\n  filteredPriceMax,\n} = guitarData.actions;\n"]},"metadata":{},"sourceType":"module"}