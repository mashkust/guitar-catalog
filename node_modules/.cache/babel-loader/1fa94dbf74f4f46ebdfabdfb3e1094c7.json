{"ast":null,"code":"import request from 'axios';\nimport { toast } from 'react-toastify';\nimport { HTTP_CODE } from '../const';\nexport const errorHandle = error => {\n  if (!request.isAxiosError(error)) {\n    throw error;\n  }\n\n  const {\n    response\n  } = error;\n\n  if (response) {\n    switch (response.status) {\n      case HTTP_CODE.BAD_REQUEST:\n        toast.info(response.data.messages[0]);\n        break;\n\n      case HTTP_CODE.UNAUTHORIZED:\n        toast.info(response.data.messages[0]);\n        break;\n\n      case HTTP_CODE.NOT_FOUND:\n        toast.info(response.data.messages[0]);\n        break;\n\n      default:\n    }\n  }\n};","map":{"version":3,"sources":["/Users/mashkust/react-starter-pack-main/src/services/error-handle.ts"],"names":["request","toast","HTTP_CODE","errorHandle","error","isAxiosError","response","status","BAD_REQUEST","info","data","messages","UNAUTHORIZED","NOT_FOUND"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AAEA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAAQC,SAAR,QAAwB,UAAxB;AAEA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAA4B;AACrD,MAAI,CAACJ,OAAO,CAACK,YAAR,CAAqBD,KAArB,CAAL,EAAkC;AAChC,UAAMA,KAAN;AACD;;AAED,QAAM;AAACE,IAAAA;AAAD,MAAaF,KAAnB;;AAEA,MAAIE,QAAJ,EAAc;AACZ,YAAQA,QAAQ,CAACC,MAAjB;AACE,WAAKL,SAAS,CAACM,WAAf;AACEP,QAAAA,KAAK,CAACQ,IAAN,CAAWH,QAAQ,CAACI,IAAT,CAAcC,QAAd,CAAuB,CAAvB,CAAX;AACA;;AACF,WAAKT,SAAS,CAACU,YAAf;AACEX,QAAAA,KAAK,CAACQ,IAAN,CAAWH,QAAQ,CAACI,IAAT,CAAcC,QAAd,CAAuB,CAAvB,CAAX;AACA;;AACF,WAAKT,SAAS,CAACW,SAAf;AACEZ,QAAAA,KAAK,CAACQ,IAAN,CAAWH,QAAQ,CAACI,IAAT,CAAcC,QAAd,CAAuB,CAAvB,CAAX;AACA;;AACF;AAVF;AAYD;AACF,CArBM","sourcesContent":["import request from 'axios';\nimport { ErrorType } from '../types/types';\nimport { toast } from 'react-toastify';\nimport {HTTP_CODE} from '../const';\n\nexport const errorHandle = (error: ErrorType): void => {\n  if (!request.isAxiosError(error)) {\n    throw error;\n  }\n\n  const {response} = error;\n\n  if (response) {\n    switch (response.status) {\n      case HTTP_CODE.BAD_REQUEST:\n        toast.info(response.data.messages[0]);\n        break;\n      case HTTP_CODE.UNAUTHORIZED:\n        toast.info(response.data.messages[0]);\n        break;\n      case HTTP_CODE.NOT_FOUND:\n        toast.info(response.data.messages[0]);\n        break;\n      default:\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}