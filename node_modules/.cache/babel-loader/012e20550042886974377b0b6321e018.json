{"ast":null,"code":"// import { createAsyncThunk } from '@reduxjs/toolkit';\n// import { api, store } from './index';\n// import { Film, NewReview, Review } from '../types/types';\n// import { changeFavoriteStatus, loadFavorite, loadFilm, loadFilms, loadPromoFilm, loadReviews, loadSimilarFilms, sendReview} from './film-data';\n// import { saveToken, dropToken } from '../services/token';\n// import { APIRoute, AuthorizationStatus } from '../const';\n// import { loadUserData, requireAuthorization } from './user-process';\n// import { UserData, AuthData } from '../types/types';\n// import {errorHandle} from '../services/error-handle';\n// export const fetchFilmsAction = createAsyncThunk(\n//   'data/fetchFilms',\n//   async () => {\n//     try {\n//       const { data } = await api.get<Film[]>(APIRoute.Films);\n//       store.dispatch(loadFilms(data));\n//     } catch (error) {\n//       errorHandle(error);\n//     }\n//   },\n// );\n// export const fetchFilmAction = createAsyncThunk(\n//   'data/fetchFilm',\n//   async (filmId: number) => {\n//     try {\n//       const {data} = await api.get<Film>(`${APIRoute.Film}${filmId}`);\n//       store.dispatch(loadFilm(data));\n//     } catch (error) {\n//       errorHandle(error);\n//     }\n//   },\n// );\n// export const checkAuthAction = createAsyncThunk(\n//   'user/checkAuth',\n//   async () => {\n//     try {\n//       await api.get(APIRoute.Login);\n//       store.dispatch(requireAuthorization(AuthorizationStatus.Auth));\n//     } catch (error) {\n//       errorHandle(error);\n//     }\n//   },\n// );\n// export const fetchReviewsAction = createAsyncThunk(\n//   'data/fetchReviews',\n//   async (filmId: number) => {\n//     try {\n//       const {data} = await api.get<Review[]>(`${APIRoute.Comments}${filmId}`);\n//       store.dispatch(loadReviews(data));\n//     } catch (error) {\n//       errorHandle(error);\n//     }\n//   },\n// );\n// export const loginAction = createAsyncThunk(\n//   'user/login',\n//   async ({ login: email, password }: AuthData) => {\n//     try {\n//       const { data: { token } } = await api.post<UserData>(APIRoute.Login, { email, password });\n//       saveToken(token);\n//       store.dispatch(requireAuthorization(AuthorizationStatus.Auth));\n//     } catch (error) {\n//       errorHandle(error);\n//     }\n//   },\n// );\n// export const logoutAction = createAsyncThunk(\n//   'user.logout',\n//   async () => {\n//     try {\n//       await api.delete(APIRoute.Logout);\n//       dropToken();\n//       store.dispatch(requireAuthorization(AuthorizationStatus.NoAuth));\n//     } catch (error) {\n//       errorHandle(error);\n//     }\n//   },\n// );\n// export const fetchPromoFilmAction = createAsyncThunk(\n//   'data/fetchPromoFilm',\n//   async () => {\n//     try {\n//       const { data } = await api.get<Film>(APIRoute.PromoFilm);\n//       store.dispatch(loadPromoFilm(data));\n//     } catch (error) {\n//       errorHandle(error);\n//     }\n//   },\n// );\n// export const fetchSimilarFilmsAction = createAsyncThunk(\n//   'data/fetchSimilarFilms',\n//   async (filmId: number) => {\n//     try {\n//       const {data} = await api.get<Film[]>(`${APIRoute.SimilarFilms}${filmId}/similar`);\n//       store.dispatch(loadSimilarFilms(data));\n//     } catch (error) {\n//       errorHandle(error);\n//     }\n//   },\n// );\n// export const fetchUserData = createAsyncThunk(\n//   'data/fetchUserData',\n//   async () => {\n//     try {\n//       const {data} = await api.get<UserData>(APIRoute.Login);\n//       store.dispatch(loadUserData(data));\n//     } catch (error) {\n//       errorHandle(error);\n//     }\n//   },\n// );\n// export const fetchFavoriteAction = createAsyncThunk(\n//   'data/fetchFavoriteFilms',\n//   async () => {\n//     try {\n//       const {data} = await api.get<Film[]>(APIRoute.Favorite);\n//       store.dispatch(loadFavorite(data));\n//     } catch (error) {\n//       errorHandle(error);\n//     }\n//   },\n// );\n// export const changeFavoriteAction = createAsyncThunk(\n//   'data/changeFavoriteFilmStatus',\n//   async ({filmId, status}: {filmId: number, status: number}) => {\n//     try {\n//       await api.post<Film>(`${APIRoute.Favorite}/${filmId}/${status}`);\n//       store.dispatch(fetchPromoFilmAction());\n//       store.dispatch(fetchFilmAction(filmId));\n//       store.dispatch(changeFavoriteStatus(false));\n//     } catch (error) {\n//       errorHandle(error);\n//     }\n//   },\n// );\n// export const sendReviewAction = createAsyncThunk(\n//   'data/sendNewReview',\n//   async ({filmId, comment, rating}: NewReview) => {\n//     try {\n//       await api.post<NewReview>(`${APIRoute.Comments}${filmId}`, {comment, rating});\n//       store.dispatch(sendReview(false));\n//     } catch (error) {\n//       errorHandle(error);\n//     }\n//   },\n// );","map":{"version":3,"sources":["/Users/mashkust/react-starter-pack-main/src/store/api-actions.ts"],"names":[],"mappingssourcesContent":["// import { createAsyncThunk } from '@reduxjs/toolkit';\n// import { api, store } from './index';\n// import { Film, NewReview, Review } from '../types/types';\n// import { changeFavoriteStatus, loadFavorite, loadFilm, loadFilms, loadPromoFilm, loadReviews, loadSimilarFilms, sendReview} from './film-data';\n// import { saveToken, dropToken } from '../services/token';\n// import { APIRoute, AuthorizationStatus } from '../const';\n// import { loadUserData, requireAuthorization } from './user-process';\n// import { UserData, AuthData } from '../types/types';\n// import {errorHandle} from '../services/error-handle';\n\n// export const fetchFilmsAction = createAsyncThunk(\n//   'data/fetchFilms',\n//   async () => {\n//     try {\n//       const { data } = await api.get<Film[]>(APIRoute.Films);\n//       store.dispatch(loadFilms(data));\n//     } catch (error) {\n//       errorHandle(error);\n//     }\n//   },\n// );\n\n// export const fetchFilmAction = createAsyncThunk(\n//   'data/fetchFilm',\n//   async (filmId: number) => {\n//     try {\n//       const {data} = await api.get<Film>(`${APIRoute.Film}${filmId}`);\n//       store.dispatch(loadFilm(data));\n//     } catch (error) {\n//       errorHandle(error);\n//     }\n//   },\n// );\n\n// export const checkAuthAction = createAsyncThunk(\n//   'user/checkAuth',\n//   async () => {\n//     try {\n//       await api.get(APIRoute.Login);\n//       store.dispatch(requireAuthorization(AuthorizationStatus.Auth));\n//     } catch (error) {\n//       errorHandle(error);\n//     }\n//   },\n// );\n\n// export const fetchReviewsAction = createAsyncThunk(\n//   'data/fetchReviews',\n//   async (filmId: number) => {\n//     try {\n//       const {data} = await api.get<Review[]>(`${APIRoute.Comments}${filmId}`);\n//       store.dispatch(loadReviews(data));\n//     } catch (error) {\n//       errorHandle(error);\n//     }\n//   },\n// );\n\n// export const loginAction = createAsyncThunk(\n//   'user/login',\n//   async ({ login: email, password }: AuthData) => {\n//     try {\n//       const { data: { token } } = await api.post<UserData>(APIRoute.Login, { email, password });\n//       saveToken(token);\n//       store.dispatch(requireAuthorization(AuthorizationStatus.Auth));\n//     } catch (error) {\n//       errorHandle(error);\n//     }\n//   },\n// );\n\n// export const logoutAction = createAsyncThunk(\n//   'user.logout',\n//   async () => {\n//     try {\n//       await api.delete(APIRoute.Logout);\n//       dropToken();\n//       store.dispatch(requireAuthorization(AuthorizationStatus.NoAuth));\n//     } catch (error) {\n//       errorHandle(error);\n//     }\n//   },\n// );\n\n// export const fetchPromoFilmAction = createAsyncThunk(\n//   'data/fetchPromoFilm',\n//   async () => {\n//     try {\n//       const { data } = await api.get<Film>(APIRoute.PromoFilm);\n//       store.dispatch(loadPromoFilm(data));\n//     } catch (error) {\n//       errorHandle(error);\n//     }\n//   },\n// );\n\n// export const fetchSimilarFilmsAction = createAsyncThunk(\n//   'data/fetchSimilarFilms',\n//   async (filmId: number) => {\n//     try {\n//       const {data} = await api.get<Film[]>(`${APIRoute.SimilarFilms}${filmId}/similar`);\n//       store.dispatch(loadSimilarFilms(data));\n//     } catch (error) {\n//       errorHandle(error);\n//     }\n//   },\n// );\n\n// export const fetchUserData = createAsyncThunk(\n//   'data/fetchUserData',\n//   async () => {\n//     try {\n//       const {data} = await api.get<UserData>(APIRoute.Login);\n//       store.dispatch(loadUserData(data));\n//     } catch (error) {\n//       errorHandle(error);\n//     }\n//   },\n// );\n\n// export const fetchFavoriteAction = createAsyncThunk(\n//   'data/fetchFavoriteFilms',\n//   async () => {\n//     try {\n//       const {data} = await api.get<Film[]>(APIRoute.Favorite);\n//       store.dispatch(loadFavorite(data));\n//     } catch (error) {\n//       errorHandle(error);\n//     }\n//   },\n// );\n\n// export const changeFavoriteAction = createAsyncThunk(\n//   'data/changeFavoriteFilmStatus',\n//   async ({filmId, status}: {filmId: number, status: number}) => {\n//     try {\n//       await api.post<Film>(`${APIRoute.Favorite}/${filmId}/${status}`);\n//       store.dispatch(fetchPromoFilmAction());\n//       store.dispatch(fetchFilmAction(filmId));\n//       store.dispatch(changeFavoriteStatus(false));\n//     } catch (error) {\n//       errorHandle(error);\n//     }\n//   },\n// );\n\n// export const sendReviewAction = createAsyncThunk(\n//   'data/sendNewReview',\n//   async ({filmId, comment, rating}: NewReview) => {\n//     try {\n//       await api.post<NewReview>(`${APIRoute.Comments}${filmId}`, {comment, rating});\n//       store.dispatch(sendReview(false));\n//     } catch (error) {\n//       errorHandle(error);\n//     }\n//   },\n// );"]},"metadata":{},"sourceType":"module"}