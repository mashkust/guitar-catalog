{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { NameSpace } from '../const';\nconst initialState = {\n  guitars: [],\n  guitar: null,\n  comments: null,\n  isDataLoaded: false,\n  isDataSending: false,\n  isSuccessModalOpened: false,\n  isCommentModalOpened: false,\n  isSorting: null,\n  isSortInc: null\n};\nexport const guitarData = createSlice({\n  name: NameSpace.data,\n  initialState,\n  reducers: {\n    setIsSuccessModalOpened: (state, action) => {\n      state.isSuccessModalOpened = action.payload;\n    },\n    setIsCommentModalOpened: (state, action) => {\n      state.isCommentModalOpened = action.payload;\n    },\n    // setSortParams: (state, action: { payload: { isSorting : SortType, isSortInc: boolean } }) => {\n    //   const { isSortInc, isSorting } = action.payload;\n    //   hashHistory.push({\n    //     search: `sortType=${isSorting}&sortDirection=${isSortInc}`,\n    //   });\n    // },\n    setIsSorting: (state, action) => {\n      state.isSorting = action.payload;\n\n      if (state.isSortInc === null) {\n        state.isSortInc = true;\n      } // const { guitars, isSortInc, isSorting } = state;\n      // state.guitars = sortByParams({ guitars, isSortInc, isSorting });\n      // hashHistory.push({\n      //   search: `sortType=${isSorting}&sortDirection=${isSortInc}`,\n      // });\n\n    },\n    setIsSortInc: (state, action) => {\n      state.isSortInc = action.payload;\n\n      if (state.isSorting === null) {\n        state.isSorting = 'price';\n      } // const { guitars, isSortInc, isSorting } = state;\n      // state.guitars = sortByParams({ guitars, isSortInc, isSorting });\n      // hashHistory.push({\n      //   search: `sortType=${isSorting}&sortDirection=${isSortInc}`,\n      // });\n\n    },\n    loadGuitars: (state, action) => {\n      state.guitars = action.payload;\n      state.isDataLoaded = true;\n    },\n    loadGuitar: (state, action) => {\n      state.guitar = action.payload;\n    },\n    loadComments: (state, action) => {\n      state.comments = action.payload.sort((a, b) => new Date(b.createAt).getTime() - new Date(a.createAt).getTime()); // if (action.payload[0]) {\n      //   const first = action.payload[0];\n      //   if (action.payload.every((el) => Number(el.guitarId) === Number(first.guitarId))) {\n      //     const guitar = state.guitars.find((el) => Number(el.id) === Number(first.guitarId));\n      //     if (guitar) {\n      //       guitar.commentsCount = action.payload.length;\n      //     }\n      //   }\n      // }\n    },\n    sendComment: (state, action) => {\n      state.isDataSending = action.payload;\n    }\n  }\n});\nexport const {\n  setSortParams,\n  loadGuitars,\n  loadGuitar,\n  loadComments,\n  sendComment,\n  setIsSuccessModalOpened,\n  setIsCommentModalOpened,\n  setIsSorting,\n  setIsSortInc\n} = guitarData.actions;","map":{"version":3,"sources":["/Users/mashkust/react-starter-pack-main/src/store/guitar-data.ts"],"names":["createSlice","NameSpace","initialState","guitars","guitar","comments","isDataLoaded","isDataSending","isSuccessModalOpened","isCommentModalOpened","isSorting","isSortInc","guitarData","name","data","reducers","setIsSuccessModalOpened","state","action","payload","setIsCommentModalOpened","setIsSorting","setIsSortInc","loadGuitars","loadGuitar","loadComments","sort","a","b","Date","createAt","getTime","sendComment","setSortParams","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,SAAmBC,SAAnB,QAAoC,UAApC;AAKA,MAAMC,YAAwB,GAAG;AAC/BC,EAAAA,OAAO,EAAE,EADsB;AAE/BC,EAAAA,MAAM,EAAE,IAFuB;AAG/BC,EAAAA,QAAQ,EAAE,IAHqB;AAI/BC,EAAAA,YAAY,EAAE,KAJiB;AAK/BC,EAAAA,aAAa,EAAE,KALgB;AAM/BC,EAAAA,oBAAoB,EAAE,KANS;AAO/BC,EAAAA,oBAAoB,EAAE,KAPS;AAQ/BC,EAAAA,SAAS,EAAE,IARoB;AAS/BC,EAAAA,SAAS,EAAE;AAToB,CAAjC;AAYA,OAAO,MAAMC,UAAU,GAAGZ,WAAW,CAAC;AACpCa,EAAAA,IAAI,EAAEZ,SAAS,CAACa,IADoB;AAEpCZ,EAAAA,YAFoC;AAGpCa,EAAAA,QAAQ,EAAE;AACRC,IAAAA,uBAAuB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAyC;AAChED,MAAAA,KAAK,CAACT,oBAAN,GAA6BU,MAAM,CAACC,OAApC;AACD,KAHO;AAIRC,IAAAA,uBAAuB,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAyC;AAChED,MAAAA,KAAK,CAACR,oBAAN,GAA6BS,MAAM,CAACC,OAApC;AACD,KANO;AAQR;AACA;AACA;AACA;AACA;AACA;AAEAE,IAAAA,YAAY,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAA0C;AACtDD,MAAAA,KAAK,CAACP,SAAN,GAAkBQ,MAAM,CAACC,OAAzB;;AACA,UAAIF,KAAK,CAACN,SAAN,KAAoB,IAAxB,EAA8B;AAC5BM,QAAAA,KAAK,CAACN,SAAN,GAAkB,IAAlB;AACD,OAJqD,CAKtD;AACA;AACA;AACA;AACA;;AACD,KAzBO;AA2BRW,IAAAA,YAAY,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAyC;AACrDD,MAAAA,KAAK,CAACN,SAAN,GAAkBO,MAAM,CAACC,OAAzB;;AACA,UAAIF,KAAK,CAACP,SAAN,KAAoB,IAAxB,EAA8B;AAC5BO,QAAAA,KAAK,CAACP,SAAN,GAAkB,OAAlB;AACD,OAJoD,CAKrD;AACA;AACA;AACA;AACA;;AACD,KArCO;AAuCRa,IAAAA,WAAW,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAC9BD,MAAAA,KAAK,CAACd,OAAN,GAAgBe,MAAM,CAACC,OAAvB;AACAF,MAAAA,KAAK,CAACX,YAAN,GAAqB,IAArB;AACD,KA1CO;AA2CRkB,IAAAA,UAAU,EAAE,CAACP,KAAD,EAAQC,MAAR,KAAmB;AAC7BD,MAAAA,KAAK,CAACb,MAAN,GAAec,MAAM,CAACC,OAAtB;AACD,KA7CO;AA8CRM,IAAAA,YAAY,EAAE,CAACR,KAAD,EAAQC,MAAR,KAA2C;AACvDD,MAAAA,KAAK,CAACZ,QAAN,GAAiBa,MAAM,CAACC,OAAP,CAAeO,IAAf,CAAoB,CAACC,CAAD,EAAIC,CAAJ,KAAU,IAAIC,IAAJ,CAASD,CAAC,CAACE,QAAX,EAAqBC,OAArB,KAAiC,IAAIF,IAAJ,CAASF,CAAC,CAACG,QAAX,EAAqBC,OAArB,EAA/D,CAAjB,CADuD,CAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KAzDO;AA0DRC,IAAAA,WAAW,EAAE,CAACf,KAAD,EAAQC,MAAR,KAAmB;AAC9BD,MAAAA,KAAK,CAACV,aAAN,GAAsBW,MAAM,CAACC,OAA7B;AACD;AA5DO;AAH0B,CAAD,CAA9B;AAmEP,OAAO,MAAM;AACXc,EAAAA,aADW;AAEXV,EAAAA,WAFW;AAGXC,EAAAA,UAHW;AAIXC,EAAAA,YAJW;AAKXO,EAAAA,WALW;AAMXhB,EAAAA,uBANW;AAOXI,EAAAA,uBAPW;AAQXC,EAAAA,YARW;AASXC,EAAAA;AATW,IAUTV,UAAU,CAACsB,OAVR","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { GuitarData, SortType } from '../types/types';\nimport { AppRoute, NameSpace } from '../const';\nimport type { Comment } from './../types/types';\nimport { sortByParams } from '../utils';\nimport hashHistory from '../hash-history';\nimport { useAppDispatch } from '../hooks/hooks';\nconst initialState: GuitarData = {\n  guitars: [],\n  guitar: null,\n  comments: null,\n  isDataLoaded: false,\n  isDataSending: false,\n  isSuccessModalOpened: false,\n  isCommentModalOpened: false,\n  isSorting: null,\n  isSortInc: null,\n};\n\nexport const guitarData = createSlice({\n  name: NameSpace.data,\n  initialState,\n  reducers: {\n    setIsSuccessModalOpened: (state, action: { payload: boolean }) => {\n      state.isSuccessModalOpened = action.payload;\n    },\n    setIsCommentModalOpened: (state, action: { payload: boolean }) => {\n      state.isCommentModalOpened = action.payload;\n    },\n\n    // setSortParams: (state, action: { payload: { isSorting : SortType, isSortInc: boolean } }) => {\n    //   const { isSortInc, isSorting } = action.payload;\n    //   hashHistory.push({\n    //     search: `sortType=${isSorting}&sortDirection=${isSortInc}`,\n    //   });\n    // },\n\n    setIsSorting: (state, action: { payload: SortType }) => {\n      state.isSorting = action.payload;\n      if (state.isSortInc === null) {\n        state.isSortInc = true;\n      }\n      // const { guitars, isSortInc, isSorting } = state;\n      // state.guitars = sortByParams({ guitars, isSortInc, isSorting });\n      // hashHistory.push({\n      //   search: `sortType=${isSorting}&sortDirection=${isSortInc}`,\n      // });\n    },\n\n    setIsSortInc: (state, action: { payload: boolean }) => {\n      state.isSortInc = action.payload;\n      if (state.isSorting === null) {\n        state.isSorting = 'price';\n      }\n      // const { guitars, isSortInc, isSorting } = state;\n      // state.guitars = sortByParams({ guitars, isSortInc, isSorting });\n      // hashHistory.push({\n      //   search: `sortType=${isSorting}&sortDirection=${isSortInc}`,\n      // });\n    },\n\n    loadGuitars: (state, action) => {\n      state.guitars = action.payload;\n      state.isDataLoaded = true;\n    },\n    loadGuitar: (state, action) => {\n      state.guitar = action.payload;\n    },\n    loadComments: (state, action: { payload: Comment[] }) => {\n      state.comments = action.payload.sort((a, b) => new Date(b.createAt).getTime() - new Date(a.createAt).getTime());\n      // if (action.payload[0]) {\n      //   const first = action.payload[0];\n      //   if (action.payload.every((el) => Number(el.guitarId) === Number(first.guitarId))) {\n      //     const guitar = state.guitars.find((el) => Number(el.id) === Number(first.guitarId));\n      //     if (guitar) {\n      //       guitar.commentsCount = action.payload.length;\n      //     }\n      //   }\n      // }\n    },\n    sendComment: (state, action) => {\n      state.isDataSending = action.payload;\n    },\n  },\n});\n\nexport const {\n  setSortParams,\n  loadGuitars,\n  loadGuitar,\n  loadComments,\n  sendComment,\n  setIsSuccessModalOpened,\n  setIsCommentModalOpened,\n  setIsSorting,\n  setIsSortInc,\n} = guitarData.actions;\n"]},"metadata":{},"sourceType":"module"}