{"ast":null,"code":"import request from'axios';import{toast}from'react-toastify';import{HTTP_CODE}from'../const';export var errorHandle=function errorHandle(error){if(!request.isAxiosError(error)){throw error;}var response=error.response;if(response){switch(response.status){case HTTP_CODE.BAD_REQUEST:toast.info(response.data.messages[0]);break;case HTTP_CODE.UNAUTHORIZED:toast.info(response.data.messages[0]);break;case HTTP_CODE.NOT_FOUND:toast.info(response.data.messages[0]);break;default:}}};","map":{"version":3,"sources":["/Users/mashkust/react-starter-pack-main/src/services/error-handle.ts"],"names":["request","toast","HTTP_CODE","errorHandle","error","isAxiosError","response","status","BAD_REQUEST","info","data","messages","UNAUTHORIZED","NOT_FOUND"],"mappings":"AAAA,MAAOA,CAAAA,OAAP,KAAoB,OAApB,CAEA,OAASC,KAAT,KAAsB,gBAAtB,CACA,OAAQC,SAAR,KAAwB,UAAxB,CAEA,MAAO,IAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAA4B,CACrD,GAAI,CAACJ,OAAO,CAACK,YAAR,CAAqBD,KAArB,CAAL,CAAkC,CAChC,KAAMA,CAAAA,KAAN,CACD,CAED,GAAOE,CAAAA,QAAP,CAAmBF,KAAnB,CAAOE,QAAP,CAEA,GAAIA,QAAJ,CAAc,CACZ,OAAQA,QAAQ,CAACC,MAAjB,EACE,IAAKL,CAAAA,SAAS,CAACM,WAAf,CACEP,KAAK,CAACQ,IAAN,CAAWH,QAAQ,CAACI,IAAT,CAAcC,QAAd,CAAuB,CAAvB,CAAX,EACA,MACF,IAAKT,CAAAA,SAAS,CAACU,YAAf,CACEX,KAAK,CAACQ,IAAN,CAAWH,QAAQ,CAACI,IAAT,CAAcC,QAAd,CAAuB,CAAvB,CAAX,EACA,MACF,IAAKT,CAAAA,SAAS,CAACW,SAAf,CACEZ,KAAK,CAACQ,IAAN,CAAWH,QAAQ,CAACI,IAAT,CAAcC,QAAd,CAAuB,CAAvB,CAAX,EACA,MACF,QAVF,CAYD,CACF,CArBM","sourcesContent":["import request from 'axios';\nimport { ErrorType } from '../types/types';\nimport { toast } from 'react-toastify';\nimport {HTTP_CODE} from '../const';\n\nexport const errorHandle = (error: ErrorType): void => {\n  if (!request.isAxiosError(error)) {\n    throw error;\n  }\n\n  const {response} = error;\n\n  if (response) {\n    switch (response.status) {\n      case HTTP_CODE.BAD_REQUEST:\n        toast.info(response.data.messages[0]);\n        break;\n      case HTTP_CODE.UNAUTHORIZED:\n        toast.info(response.data.messages[0]);\n        break;\n      case HTTP_CODE.NOT_FOUND:\n        toast.info(response.data.messages[0]);\n        break;\n      default:\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}