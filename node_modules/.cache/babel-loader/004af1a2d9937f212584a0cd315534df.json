{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { NameSpace } from '../const';\nimport { sortByParams } from '../utils';\nconst initialState = {\n  guitars: [],\n  guitar: null,\n  comments: null,\n  isDataLoaded: false,\n  isDataSending: false,\n  isSuccessModalOpened: false,\n  isCommentModalOpened: false,\n  isSorting: null,\n  isSortInc: null,\n  minPrice: null,\n  maxPrice: null,\n  selectedTypes: [],\n  selectedStrings: [],\n  filteredGuitars: []\n};\nexport const guitarData = createSlice({\n  name: NameSpace.data,\n  initialState,\n  reducers: {\n    setIsSuccessModalOpened: (state, action) => {\n      state.isSuccessModalOpened = action.payload;\n    },\n    setIsCommentModalOpened: (state, action) => {\n      state.isCommentModalOpened = action.payload;\n    },\n    // setSortParams: (state, action: { payload: { isSorting : SortType, isSortInc: boolean } }) => {\n    //   const { isSortInc, isSorting } = action.payload;\n    //   hashHistory.push({\n    //     search: `sortType=${isSorting}&sortDirection=${isSortInc}`,\n    //   });\n    // },\n    setIsSorting: (state, action) => {\n      state.isSorting = action.payload;\n\n      if (state.isSortInc === null) {\n        state.isSortInc = true;\n      }\n\n      const {\n        guitars,\n        isSortInc,\n        isSorting\n      } = state;\n      state.guitars = sortByParams({\n        guitars,\n        isSortInc,\n        isSorting\n      }); // hashHistory.push({\n      //   search: `sortType=${isSorting}&sortDirection=${isSortInc}`,\n      // });\n    },\n    setIsSortInc: (state, action) => {\n      state.isSortInc = action.payload;\n\n      if (state.isSorting === null) {\n        state.isSorting = 'price';\n      }\n\n      const {\n        guitars,\n        isSortInc,\n        isSorting\n      } = state;\n      state.guitars = sortByParams({\n        guitars,\n        isSortInc,\n        isSorting\n      }); // hashHistory.push({\n      //   search: `sortType=${isSorting}&sortDirection=${isSortInc}`,\n      // });\n    },\n    loadGuitars: (state, action) => {\n      state.guitars = action.payload;\n      state.isDataLoaded = true;\n    },\n    loadGuitar: (state, action) => {\n      state.guitar = action.payload;\n    },\n    loadComments: (state, action) => {\n      state.comments = action.payload.sort((a, b) => new Date(b.createAt).getTime() - new Date(a.createAt).getTime());\n\n      if (action.payload[0]) {\n        const first = action.payload[0];\n\n        if (action.payload.every(el => Number(el.guitarId) === Number(first.guitarId))) {\n          const guitar = state.guitars.find(el => Number(el.id) === Number(first.guitarId));\n\n          if (guitar) {\n            guitar.commentsCount = action.payload.length;\n          }\n        }\n      }\n    },\n    sendComment: (state, action) => {\n      state.isDataSending = action.payload;\n    },\n    setMinPrice: (state, action) => {\n      state.minPrice = action.payload;\n    },\n    setMaxPrice: (state, action) => {\n      state.maxPrice = action.payload;\n    },\n    setSelectedTypes: (state, action) => {\n      const {\n        selectedTypes\n      } = state;\n      const {\n        payload\n      } = action;\n\n      if (selectedTypes.includes(payload)) {\n        state.selectedTypes = selectedTypes.filter(el => el !== payload);\n      } else {\n        selectedTypes.push(payload);\n      }\n\n      let fUkulele = [];\n      let fElectric = [];\n      let fAcoustc = [];\n\n      if (state.selectedTypes.length > 0) {\n        if (state.selectedTypes.includes('electric')) {\n          fElectric = state.selectedStrings.filter(el => el < 12);\n        }\n\n        if (state.selectedTypes.includes('ukulele')) {\n          fUkulele = state.selectedStrings.filter(el => el < 6);\n        }\n\n        if (state.selectedTypes.includes('acoustic')) {\n          fAcoustc = state.selectedStrings.filter(el => el > 4);\n        }\n\n        state.selectedStrings = Array.from(new Set([...fElectric, ...fUkulele, ...fAcoustc]));\n      }\n    },\n    setSelectedStrings: (state, action) => {\n      const {\n        selectedStrings\n      } = state;\n      const {\n        payload\n      } = action;\n\n      if (selectedStrings.includes(payload)) {\n        state.selectedStrings = selectedStrings.filter(el => el !== payload);\n      } else {\n        selectedStrings.push(payload);\n      }\n    },\n    setFilteredGuitars: (state, action) => {\n      console.log('state.guitars', state.guitars);\n      const filteredGuitars = state.guitars.filter(el => {\n        console.log('duchjdi');\n        return (action.payload.maxPrice === null || el.price <= Number(action.payload.maxPrice)) && (action.payload.minPrice === null || el.price >= Number(action.payload.minPrice)); //  && action.payload.selectedTypes.includes(el.type) \n        //  && action.payload.selectedStrings.includes(el.stringCount)\n      });\n      console.log(' state.filteredGuitars', filteredGuitars);\n    }\n  }\n});\nexport const {\n  loadGuitars,\n  loadGuitar,\n  loadComments,\n  sendComment,\n  setIsSuccessModalOpened,\n  setIsCommentModalOpened,\n  setIsSorting,\n  setIsSortInc,\n  setMinPrice,\n  setMaxPrice,\n  setSelectedTypes,\n  setSelectedStrings,\n  setFilteredGuitars\n} = guitarData.actions;","map":{"version":3,"sources":["/Users/mashkust/react-starter-pack-main/src/store/guitar-data.ts"],"names":["createSlice","NameSpace","sortByParams","initialState","guitars","guitar","comments","isDataLoaded","isDataSending","isSuccessModalOpened","isCommentModalOpened","isSorting","isSortInc","minPrice","maxPrice","selectedTypes","selectedStrings","filteredGuitars","guitarData","name","data","reducers","setIsSuccessModalOpened","state","action","payload","setIsCommentModalOpened","setIsSorting","setIsSortInc","loadGuitars","loadGuitar","loadComments","sort","a","b","Date","createAt","getTime","first","every","el","Number","guitarId","find","id","commentsCount","length","sendComment","setMinPrice","setMaxPrice","setSelectedTypes","includes","filter","push","fUkulele","fElectric","fAcoustc","Array","from","Set","setSelectedStrings","setFilteredGuitars","console","log","price","actions"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { GuitarData, GuitarTypes, SortType } from '../types/types';\nimport { NameSpace } from '../const';\nimport type { Comment } from './../types/types';\nimport { sortByParams } from '../utils';\nconst initialState: GuitarData = {\n  guitars: [],\n  guitar: null,\n  comments: null,\n  isDataLoaded: false,\n  isDataSending: false,\n  isSuccessModalOpened: false,\n  isCommentModalOpened: false,\n  isSorting: null,\n  isSortInc: null,\n  minPrice: null,\n  maxPrice: null,\n  selectedTypes: [],\n  selectedStrings: [],\n  filteredGuitars: [],\n};\n\nexport const guitarData = createSlice({\n  name: NameSpace.data,\n  initialState,\n  reducers: {\n    setIsSuccessModalOpened: (state, action: { payload: boolean }) => {\n      state.isSuccessModalOpened = action.payload;\n    },\n    setIsCommentModalOpened: (state, action: { payload: boolean }) => {\n      state.isCommentModalOpened = action.payload;\n    },\n    // setSortParams: (state, action: { payload: { isSorting : SortType, isSortInc: boolean } }) => {\n    //   const { isSortInc, isSorting } = action.payload;\n    //   hashHistory.push({\n    //     search: `sortType=${isSorting}&sortDirection=${isSortInc}`,\n    //   });\n    // },\n    setIsSorting: (state, action: { payload: SortType }) => {\n      state.isSorting = action.payload;\n      if (state.isSortInc === null) {\n        state.isSortInc = true;\n      }\n      const { guitars, isSortInc, isSorting } = state;\n      state.guitars = sortByParams({ guitars, isSortInc, isSorting });\n      // hashHistory.push({\n      //   search: `sortType=${isSorting}&sortDirection=${isSortInc}`,\n      // });\n    },\n    setIsSortInc: (state, action: { payload: boolean }) => {\n      state.isSortInc = action.payload;\n      if (state.isSorting === null) {\n        state.isSorting = 'price';\n      }\n      const { guitars, isSortInc, isSorting } = state;\n      state.guitars = sortByParams({ guitars, isSortInc, isSorting });\n      // hashHistory.push({\n      //   search: `sortType=${isSorting}&sortDirection=${isSortInc}`,\n      // });\n    },\n    loadGuitars: (state, action) => {\n      state.guitars = action.payload;\n      state.isDataLoaded = true;\n    },\n    loadGuitar: (state, action) => {\n      state.guitar = action.payload;\n    },\n    loadComments: (state, action: { payload: Comment[] }) => {\n      state.comments = action.payload.sort((a, b) => new Date(b.createAt).getTime() - new Date(a.createAt).getTime());\n      if (action.payload[0]) {\n        const first = action.payload[0];\n        if (action.payload.every((el) => Number(el.guitarId) === Number(first.guitarId))) {\n          const guitar = state.guitars.find((el) => Number(el.id) === Number(first.guitarId));\n          if (guitar) {\n            guitar.commentsCount = action.payload.length;\n          }\n        }\n      }\n    },\n    sendComment: (state, action) => {\n      state.isDataSending = action.payload;\n    },\n    setMinPrice: (state, action) => {\n      state.minPrice = action.payload;\n    },\n    setMaxPrice: (state, action) => {\n      state.maxPrice = action.payload;\n    },\n    setSelectedTypes: (state, action: { payload: GuitarTypes }) => {\n      const { selectedTypes } = state;\n      const { payload } = action;\n      if (selectedTypes.includes(payload)) {\n        state.selectedTypes = selectedTypes.filter((el) => el !== payload);\n      }\n      else {\n        selectedTypes.push(payload);\n      }\n      let fUkulele: number[] = [];\n      let fElectric: number[] = [];\n      let fAcoustc: number[] = [];\n      if (state.selectedTypes.length > 0) {\n        if (state.selectedTypes.includes('electric')) {\n          fElectric = state.selectedStrings.filter((el) => el < 12);\n        }\n        if (state.selectedTypes.includes('ukulele')) {\n          fUkulele = state.selectedStrings.filter((el) => el < 6);\n        }\n        if (state.selectedTypes.includes('acoustic')) {\n          fAcoustc = state.selectedStrings.filter((el) => el > 4);\n        }\n        state.selectedStrings = Array.from(new Set([...fElectric, ...fUkulele, ...fAcoustc]));\n      }\n    },\n    setSelectedStrings: (state, action: { payload: number }) => {\n      const { selectedStrings } = state;\n      const { payload } = action;\n      if (selectedStrings.includes(payload)) {\n        state.selectedStrings = selectedStrings.filter((el) => el !== payload);\n      }\n      else {\n        selectedStrings.push(payload);\n      }\n    },\n    setFilteredGuitars: (state, action: { payload: {maxPrice : string | null, minPrice : string | null, selectedTypes:GuitarTypes[], selectedStrings: number[]}}) => {\n      console.log('state.guitars', state.guitars);\n       const filteredGuitars = state.guitars.filter((el)=>  {\n         console.log('duchjdi');\n         return (action.payload.maxPrice === null || el.price <= Number(action.payload.maxPrice))\n         && (action.payload.minPrice === null || el.price >= Number(action.payload.minPrice))\n        //  && action.payload.selectedTypes.includes(el.type) \n        //  && action.payload.selectedStrings.includes(el.stringCount)\n       });\n      console.log(' state.filteredGuitars',  filteredGuitars );\n    },\n  },\n});\n\nexport const {\n  loadGuitars,\n  loadGuitar,\n  loadComments,\n  sendComment,\n  setIsSuccessModalOpened,\n  setIsCommentModalOpened,\n  setIsSorting,\n  setIsSortInc,\n  setMinPrice,\n  setMaxPrice,\n  setSelectedTypes,\n  setSelectedStrings,\n  setFilteredGuitars,\n} = guitarData.actions;\n"]},"metadata":{},"sourceType":"module"}