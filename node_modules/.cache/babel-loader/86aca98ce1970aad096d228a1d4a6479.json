{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { AppRoute, NameSpace } from '../const';\nimport { sortByParams } from '../utils';\nimport hashHistory from '../hash-history';\nconst initialState = {\n  guitars: [],\n  guitar: null,\n  comments: [],\n  isDataLoaded: false,\n  isDataSending: false,\n  isSuccessModalOpened: false,\n  isCommentModalOpened: false,\n  isSorting: null,\n  isSortInc: null\n};\nexport const guitarData = createSlice({\n  name: NameSpace.data,\n  initialState,\n  reducers: {\n    setIsSuccessModalOpened: (state, action) => {\n      state.isSuccessModalOpened = action.payload;\n    },\n    setIsCommentModalOpened: (state, action) => {\n      state.isCommentModalOpened = action.payload;\n    },\n    setIsSorting: (state, action) => {\n      state.isSorting = action.payload;\n\n      if (state.isSortInc === null) {\n        state.isSortInc = true;\n      }\n\n      const {\n        guitars,\n        isSortInc,\n        isSorting\n      } = state;\n      state.guitars = sortByParams({\n        guitars,\n        isSortInc,\n        isSorting\n      });\n      hashHistory.push({\n        pathname: AppRoute.Page1,\n        search: AppRoute.SortPrice\n      });\n    },\n    setIsSortInc: (state, action) => {\n      state.isSortInc = action.payload;\n\n      if (state.isSorting === null) {\n        state.isSorting = 'price';\n      }\n\n      const {\n        guitars,\n        isSortInc,\n        isSorting\n      } = state;\n      state.guitars = sortByParams({\n        guitars,\n        isSortInc,\n        isSorting\n      });\n    },\n    loadGuitars: (state, action) => {\n      state.guitars = action.payload;\n      state.isDataLoaded = true;\n    },\n    loadGuitar: (state, action) => {\n      state.guitar = action.payload;\n    },\n    loadComments: (state, action) => {\n      state.comments = action.payload.sort((a, b) => new Date(b.createAt).getTime() - new Date(a.createAt).getTime());\n\n      if (action.payload[0]) {\n        const first = action.payload[0];\n\n        if (action.payload.every(el => Number(el.guitarId) === Number(first.guitarId))) {\n          const guitar = state.guitars.find(el => Number(el.id) === Number(first.guitarId));\n\n          if (guitar) {\n            guitar.commentsCount = action.payload.length;\n          }\n        }\n      }\n    },\n    sendComment: (state, action) => {\n      state.isDataSending = action.payload;\n    }\n  }\n});\nexport const {\n  loadGuitars,\n  loadGuitar,\n  loadComments,\n  sendComment,\n  setIsSuccessModalOpened,\n  setIsCommentModalOpened,\n  setIsSorting,\n  setIsSortInc\n} = guitarData.actions;","map":{"version":3,"sources":["/Users/mashkust/react-starter-pack-main/src/store/guitar-data.ts"],"names":["createSlice","AppRoute","NameSpace","sortByParams","hashHistory","initialState","guitars","guitar","comments","isDataLoaded","isDataSending","isSuccessModalOpened","isCommentModalOpened","isSorting","isSortInc","guitarData","name","data","reducers","setIsSuccessModalOpened","state","action","payload","setIsCommentModalOpened","setIsSorting","push","pathname","Page1","search","SortPrice","setIsSortInc","loadGuitars","loadGuitar","loadComments","sort","a","b","Date","createAt","getTime","first","every","el","Number","guitarId","find","id","commentsCount","length","sendComment","actions"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { GuitarData, SortType } from '../types/types';\nimport { AppRoute, NameSpace } from '../const';\nimport type { Comment } from './../types/types';\nimport { sortByParams } from '../utils';\nimport hashHistory from '../hash-history';\nconst initialState: GuitarData = {\n  guitars: [],\n  guitar: null,\n  comments: [],\n  isDataLoaded: false,\n  isDataSending: false,\n  isSuccessModalOpened: false,\n  isCommentModalOpened: false,\n  isSorting: null,\n  isSortInc: null,\n};\n\nexport const guitarData = createSlice({\n  name: NameSpace.data,\n  initialState,\n  reducers: {\n    setIsSuccessModalOpened: (state, action: { payload: boolean }) => {\n      state.isSuccessModalOpened = action.payload;\n    },\n    setIsCommentModalOpened: (state, action: { payload: boolean }) => {\n      state.isCommentModalOpened = action.payload;\n    },\n\n    setIsSorting: (state, action: { payload: SortType }) => {\n      state.isSorting = action.payload;\n      if (state.isSortInc === null) {\n        state.isSortInc = true;\n      }\n      const { guitars, isSortInc, isSorting } = state;\n      state.guitars = sortByParams({ guitars, isSortInc, isSorting });\n      hashHistory.push({\n        pathname: AppRoute.Page1,\n        search: AppRoute.SortPrice,\n      });\n    },\n\n    setIsSortInc: (state, action: { payload: boolean }) => {\n      state.isSortInc = action.payload;\n      if (state.isSorting === null) {\n        state.isSorting = 'price';\n      }\n      const { guitars, isSortInc, isSorting } = state;\n      state.guitars = sortByParams({ guitars, isSortInc, isSorting });\n    },\n\n    loadGuitars: (state, action) => {\n      state.guitars = action.payload;\n      state.isDataLoaded = true;\n    },\n    loadGuitar: (state, action) => {\n      state.guitar = action.payload;\n    },\n    loadComments: (state, action: { payload: Comment[] }) => {\n      state.comments = action.payload.sort((a, b) => new Date(b.createAt).getTime() - new Date(a.createAt).getTime());\n      if (action.payload[0]) {\n        const first = action.payload[0];\n        if (action.payload.every((el) => Number(el.guitarId) === Number(first.guitarId))) {\n          const guitar = state.guitars.find((el) => Number(el.id) === Number(first.guitarId));\n          if (guitar) {\n            guitar.commentsCount = action.payload.length;\n          }\n        }\n      }\n    },\n    sendComment: (state, action) => {\n      state.isDataSending = action.payload;\n    },\n  },\n});\n\nexport const {\n  loadGuitars,\n  loadGuitar,\n  loadComments,\n  sendComment,\n  setIsSuccessModalOpened,\n  setIsCommentModalOpened,\n  setIsSorting,\n  setIsSortInc,\n} = guitarData.actions;\n"]},"metadata":{},"sourceType":"module"}