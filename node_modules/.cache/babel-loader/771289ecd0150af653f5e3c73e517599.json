{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { NameSpace } from '../const';\nimport { sortByParams } from '../utils';\nimport hashHistory from '../hash-history';\nimport { toast } from 'react-toastify';\nconst initialState = {\n  guitars: [],\n  guitar: null,\n  comments: null,\n  isDataLoaded: false,\n  isDataSending: false,\n  isSuccessModalOpened: false,\n  isCommentModalOpened: false,\n  isSorting: null,\n  isSortInc: null,\n  minPrice: null,\n  maxPrice: null,\n  selectedTypes: [],\n  selectedStrings: [],\n  filteredGuitarsLength: null,\n  filteredPriceMin: null,\n  filteredPriceMax: null,\n  boughtGuitars: [],\n  isDisconnect: true,\n  isSuccessBasketModal: false,\n  isBasketModalOpened: false,\n  isGuitar: null,\n  isBasketRemoval: false,\n  isCoupon: null\n};\nexport const guitarData = createSlice({\n  name: NameSpace.data,\n  initialState,\n  reducers: {\n    setIsSuccessModalOpened: (state, action) => {\n      state.isSuccessModalOpened = action.payload;\n    },\n    setIsCommentModalOpened: (state, action) => {\n      state.isCommentModalOpened = action.payload;\n    },\n    setIsSorting: (state, action) => {\n      state.isSorting = action.payload;\n\n      if (state.isSortInc === null) {\n        state.isSortInc = true;\n      }\n\n      const {\n        guitars,\n        isSortInc,\n        isSorting\n      } = state;\n      state.guitars = sortByParams({\n        guitars,\n        isSortInc,\n        isSorting\n      });\n      window.localStorage.setItem('sortType', String(isSorting));\n      window.localStorage.setItem('sortDirection', String(isSortInc));\n      hashHistory.push({\n        search: `sortType=${state.isSorting}?sortDirection=${state.isSortInc}`\n      });\n    },\n    setIsSortInc: (state, action) => {\n      state.isSortInc = action.payload;\n\n      if (state.isSorting === null) {\n        state.isSorting = 'price';\n      }\n\n      const {\n        guitars,\n        isSortInc,\n        isSorting\n      } = state;\n      state.guitars = sortByParams({\n        guitars,\n        isSortInc,\n        isSorting\n      });\n      window.localStorage.setItem('sortType', String(isSorting));\n      window.localStorage.setItem('sortDirection', String(isSortInc));\n      hashHistory.push({\n        search: `sortType=${isSorting}?sortDirection=${isSortInc}`\n      });\n    },\n    loadGuitars: (state, action) => {\n      state.guitars = action.payload;\n      state.isDataLoaded = true;\n    },\n    loadGuitar: (state, action) => {\n      state.guitar = action.payload;\n    },\n    loadComments: (state, action) => {\n      state.comments = action.payload.sort((a, b) => new Date(b.createAt).getTime() - new Date(a.createAt).getTime());\n\n      if (action.payload[0]) {\n        const first = action.payload[0];\n\n        if (action.payload.every(el => Number(el.guitarId) === Number(first.guitarId))) {\n          const guitar = state.guitars.find(el => Number(el.id) === Number(first.guitarId));\n\n          if (guitar) {\n            guitar.commentsCount = action.payload.length;\n          }\n        }\n      }\n    },\n    sendComment: (state, action) => {\n      state.isDataSending = action.payload;\n    },\n    setMinPrice: (state, action) => {\n      if (action.payload === null || action.payload === '' || action.payload === undefined) {\n        window.localStorage.removeItem('minPrice');\n      }\n\n      state.minPrice = action.payload;\n    },\n    setMaxPrice: (state, action) => {\n      if (action.payload === null || action.payload === '' || action.payload === undefined) {\n        window.localStorage.removeItem('maxPrice');\n      }\n\n      state.maxPrice = action.payload;\n    },\n    setSelectedTypes: (state, action) => {\n      const {\n        selectedTypes\n      } = state;\n      const {\n        payload\n      } = action;\n\n      if (!payload) {\n        state.selectedTypes = [];\n      } else {\n        if (selectedTypes.includes(payload)) {\n          state.selectedTypes = selectedTypes.filter(el => el !== payload);\n        } else {\n          selectedTypes.push(payload);\n        }\n\n        let fUkulele = [];\n        let fElectric = [];\n        let fAcoustc = [];\n\n        if (state.selectedTypes.length > 0) {\n          if (state.selectedTypes.includes('electric')) {\n            fElectric = state.selectedStrings.filter(el => el < 12);\n          }\n\n          if (state.selectedTypes.includes('ukulele')) {\n            fUkulele = state.selectedStrings.filter(el => el < 6);\n          }\n\n          if (state.selectedTypes.includes('acoustic')) {\n            fAcoustc = state.selectedStrings.filter(el => el > 4);\n          }\n\n          state.selectedStrings = Array.from(new Set([...fElectric, ...fUkulele, ...fAcoustc]));\n        }\n\n        if (state.selectedTypes.length === 0) {\n          window.localStorage.removeItem('types');\n        }\n\n        if (state.selectedStrings.length === 0) {\n          window.localStorage.removeItem('strings');\n        }\n      }\n    },\n    setTypesGroup: (state, action) => {\n      state.selectedTypes = action.payload;\n    },\n    setStringsGroup: (state, action) => {\n      state.selectedStrings = action.payload;\n    },\n    setSelectedStrings: (state, action) => {\n      const {\n        selectedStrings\n      } = state;\n      const {\n        payload\n      } = action;\n\n      if (!payload) {\n        state.selectedStrings = [];\n      } else {\n        if (selectedStrings.includes(payload)) {\n          state.selectedStrings = selectedStrings.filter(el => el !== payload);\n        } else {\n          selectedStrings.push(payload);\n        }\n      }\n\n      if (state.selectedStrings.length === 0) {\n        window.localStorage.removeItem('strings');\n      }\n    },\n    setFilteredGuitarsLength: (state, action) => {\n      state.filteredGuitarsLength = action.payload;\n    },\n    setFilteredPriceMin: (state, action) => {\n      state.filteredPriceMin = action.payload;\n    },\n    setFilteredPriceMax: (state, action) => {\n      state.filteredPriceMax = action.payload;\n    },\n    buyGuitar: (state, action) => {\n      const {\n        boughtGuitars\n      } = state;\n      const {\n        payload\n      } = action;\n      const boughtGuitar = state.boughtGuitars.find(el => el.id === payload.id);\n\n      if (boughtGuitar) {\n        boughtGuitar.quantity = (boughtGuitar.quantity || 1) + 1;\n      } else {\n        const newGuitar = { ...payload\n        };\n        newGuitar.quantity = 1;\n        boughtGuitars.push(newGuitar);\n      }\n    },\n    deleteGuitar: (state, action) => {\n      const {\n        boughtGuitars\n      } = state;\n      const {\n        payload\n      } = action;\n      state.boughtGuitars = boughtGuitars.filter(el => el.id !== payload);\n    },\n    setQuantity: (state, action) => {\n      const {\n        id,\n        quantity\n      } = action.payload;\n      const boughtGuitar = state.boughtGuitars.find(el => el.id === id);\n\n      if (boughtGuitar) {\n        boughtGuitar.quantity = quantity === 'inc' ? (boughtGuitar.quantity || 1) + 1 : (boughtGuitar.quantity || 1) - 1;\n        window.localStorage.setItem('boughtGuitars', String(boughtGuitar.id));\n\n        if (boughtGuitar.quantity < 1) {\n          state.isBasketRemoval = true;\n          boughtGuitar.quantity = (boughtGuitar.quantity || 0) + 1;\n        }\n      }\n    },\n    setIsDisconnect: (state, action) => {\n      state.isDisconnect = action.payload;\n\n      if (!action.payload) {\n        toast.error('Internet disconnected');\n        state.isDisconnect = true;\n      }\n    },\n    setIsSuccessBasket: (state, action) => {\n      state.isSuccessBasketModal = action.payload;\n    },\n    setIsBasket: (state, action) => {\n      state.isBasketModalOpened = action.payload;\n    },\n    setIsGuitar: (state, action) => {\n      state.isGuitar = action.payload;\n    },\n    setIsBasketRemoval: (state, action) => {\n      state.isBasketRemoval = action.payload;\n    },\n    setIsCoupon: (state, action) => {\n      state.isCoupon = action.payload;\n    }\n  }\n});\nexport const {\n  loadGuitars,\n  loadGuitar,\n  loadComments,\n  sendComment,\n  setIsSuccessModalOpened,\n  setIsCommentModalOpened,\n  setIsSorting,\n  setIsSortInc,\n  setMinPrice,\n  setMaxPrice,\n  setSelectedTypes,\n  setSelectedStrings,\n  setFilteredGuitarsLength,\n  setFilteredPriceMin,\n  setFilteredPriceMax,\n  setStringsGroup,\n  setTypesGroup,\n  buyGuitar,\n  setQuantity,\n  deleteGuitar,\n  setIsDisconnect,\n  setIsBasket,\n  setIsSuccessBasket,\n  setIsGuitar,\n  setIsBasketRemoval,\n  setIsCoupon\n} = guitarData.actions;","map":{"version":3,"sources":["/Users/mashkust/react-starter-pack-main/src/store/guitar-data.ts"],"names":["createSlice","NameSpace","sortByParams","hashHistory","toast","initialState","guitars","guitar","comments","isDataLoaded","isDataSending","isSuccessModalOpened","isCommentModalOpened","isSorting","isSortInc","minPrice","maxPrice","selectedTypes","selectedStrings","filteredGuitarsLength","filteredPriceMin","filteredPriceMax","boughtGuitars","isDisconnect","isSuccessBasketModal","isBasketModalOpened","isGuitar","isBasketRemoval","isCoupon","guitarData","name","data","reducers","setIsSuccessModalOpened","state","action","payload","setIsCommentModalOpened","setIsSorting","window","localStorage","setItem","String","push","search","setIsSortInc","loadGuitars","loadGuitar","loadComments","sort","a","b","Date","createAt","getTime","first","every","el","Number","guitarId","find","id","commentsCount","length","sendComment","setMinPrice","undefined","removeItem","setMaxPrice","setSelectedTypes","includes","filter","fUkulele","fElectric","fAcoustc","Array","from","Set","setTypesGroup","setStringsGroup","setSelectedStrings","setFilteredGuitarsLength","setFilteredPriceMin","setFilteredPriceMax","buyGuitar","boughtGuitar","quantity","newGuitar","deleteGuitar","setQuantity","setIsDisconnect","error","setIsSuccessBasket","setIsBasket","setIsGuitar","setIsBasketRemoval","setIsCoupon","actions"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { Guitar, GuitarData, GuitarTypes, SortType } from '../types/types';\nimport { NameSpace } from '../const';\nimport type { Comment } from './../types/types';\nimport { sortByParams } from '../utils';\nimport hashHistory from '../hash-history';\nimport {toast} from 'react-toastify';\nconst initialState: GuitarData = {\n  guitars: [],\n  guitar: null,\n  comments: null,\n  isDataLoaded: false,\n  isDataSending: false,\n  isSuccessModalOpened: false,\n  isCommentModalOpened: false,\n  isSorting: null,\n  isSortInc: null,\n  minPrice: null,\n  maxPrice: null,\n  selectedTypes: [],\n  selectedStrings: [],\n  filteredGuitarsLength: null,\n  filteredPriceMin: null,\n  filteredPriceMax: null,\n  boughtGuitars: [],\n  isDisconnect: true,\n  isSuccessBasketModal: false,\n  isBasketModalOpened: false,\n  isGuitar: null,\n  isBasketRemoval: false,\n  isCoupon: null,\n};\n\nexport const guitarData = createSlice({\n  name: NameSpace.data,\n  initialState,\n  reducers: {\n    setIsSuccessModalOpened: (state, action: { payload: boolean }) => {\n      state.isSuccessModalOpened = action.payload;\n    },\n    setIsCommentModalOpened: (state, action: { payload: boolean }) => {\n      state.isCommentModalOpened = action.payload;\n    },\n    setIsSorting: (state, action: { payload: SortType }) => {\n      state.isSorting = action.payload;\n      if (state.isSortInc === null) {\n        state.isSortInc = true;\n      }\n      const { guitars, isSortInc, isSorting } = state;\n      state.guitars = sortByParams({ guitars, isSortInc, isSorting });\n      window.localStorage.setItem('sortType',String(isSorting));\n      window.localStorage.setItem('sortDirection',String(isSortInc));\n      hashHistory.push({\n        search: `sortType=${state.isSorting}?sortDirection=${state.isSortInc}`,\n      });\n    },\n    setIsSortInc: (state, action: { payload: boolean }) => {\n      state.isSortInc = action.payload;\n      if (state.isSorting === null) {\n        state.isSorting = 'price';\n      }\n      const { guitars, isSortInc, isSorting } = state;\n      state.guitars = sortByParams({ guitars, isSortInc, isSorting });\n      window.localStorage.setItem('sortType',String(isSorting));\n      window.localStorage.setItem('sortDirection',String(isSortInc));\n      hashHistory.push({\n        search: `sortType=${isSorting}?sortDirection=${isSortInc}`,\n      });\n    },\n    loadGuitars: (state, action) => {\n      state.guitars = action.payload;\n      state.isDataLoaded = true;\n    },\n    loadGuitar: (state, action) => {\n      state.guitar = action.payload;\n    },\n    loadComments: (state, action: { payload: Comment[] }) => {\n      state.comments = action.payload.sort((a, b) => new Date(b.createAt).getTime() - new Date(a.createAt).getTime());\n      if (action.payload[0]) {\n        const first = action.payload[0];\n        if (action.payload.every((el) => Number(el.guitarId) === Number(first.guitarId))) {\n          const guitar = state.guitars.find((el) => Number(el.id) === Number(first.guitarId));\n          if (guitar) {\n            guitar.commentsCount = action.payload.length;\n          }\n        }\n      }\n    },\n    sendComment: (state, action) => {\n      state.isDataSending = action.payload;\n    },\n    setMinPrice: (state, action:{ payload: string | null}) => {\n      if (action.payload === null || action.payload==='' || action.payload===undefined ) {\n        window.localStorage.removeItem('minPrice');\n      }\n      state.minPrice = action.payload;\n    },\n    setMaxPrice: (state, action:{ payload: string | null}) => {\n      if (action.payload === null || action.payload==='' || action.payload===undefined) {\n        window.localStorage.removeItem('maxPrice');\n      }\n      state.maxPrice = action.payload;\n    },\n    setSelectedTypes: (state, action: { payload: GuitarTypes | null }) => {\n      const { selectedTypes } = state;\n      const { payload } = action;\n      if (!payload) {\n        state.selectedTypes = [];\n      } else {\n        if (selectedTypes.includes(payload)) {\n          state.selectedTypes = selectedTypes.filter((el) => el !== payload);\n        }\n        else {\n          selectedTypes.push(payload);\n        }\n        let fUkulele: number[] = [];\n        let fElectric: number[] = [];\n        let fAcoustc: number[] = [];\n        if (state.selectedTypes.length > 0) {\n          if (state.selectedTypes.includes('electric')) {\n            fElectric = state.selectedStrings.filter((el) => el < 12);\n          }\n          if (state.selectedTypes.includes('ukulele')) {\n            fUkulele = state.selectedStrings.filter((el) => el < 6);\n          }\n          if (state.selectedTypes.includes('acoustic')) {\n            fAcoustc = state.selectedStrings.filter((el) => el > 4);\n          }\n          state.selectedStrings = Array.from(new Set([...fElectric, ...fUkulele, ...fAcoustc]));\n        }\n        if (state.selectedTypes.length === 0) {\n          window.localStorage.removeItem('types');\n        }\n        if (state.selectedStrings.length === 0) {\n          window.localStorage.removeItem('strings');\n        }\n      }\n    },\n    setTypesGroup: (state, action: { payload: GuitarTypes[] }) => {\n      state.selectedTypes = action.payload;\n    },\n    setStringsGroup: (state, action: { payload: number[] }) => {\n      state.selectedStrings = action.payload;\n    },\n    setSelectedStrings: (state, action: { payload: number | null }) => {\n      const { selectedStrings } = state;\n      const { payload } = action;\n      if (!payload) {\n        state.selectedStrings = [];\n      } else {\n        if (selectedStrings.includes(payload)) {\n          state.selectedStrings = selectedStrings.filter((el) => el !== payload);\n        }\n        else {\n          selectedStrings.push(payload);\n        }\n      }\n      if (  state.selectedStrings.length === 0) {\n        window.localStorage.removeItem('strings');\n      }\n    },\n    setFilteredGuitarsLength: (state, action) => {\n      state.filteredGuitarsLength = action.payload;\n    },\n    setFilteredPriceMin: (state, action) => {\n      state.filteredPriceMin = action.payload;\n    },\n    setFilteredPriceMax: (state, action) => {\n      state.filteredPriceMax = action.payload;\n    },\n    buyGuitar: (state, action: {payload : Guitar}) => {\n      const { boughtGuitars } = state;\n      const { payload } = action;\n      const boughtGuitar = state.boughtGuitars.find((el) => el.id === payload.id);\n      if (boughtGuitar) {\n        boughtGuitar.quantity = (boughtGuitar.quantity || 1) + 1 ;\n      }\n      else {\n        const newGuitar = {...payload};\n        newGuitar.quantity = 1;\n        boughtGuitars.push(newGuitar);\n      }\n    },\n    deleteGuitar: (state, action) => {\n      const { boughtGuitars } = state;\n      const { payload } = action;\n      state.boughtGuitars = boughtGuitars.filter((el) => el.id !== payload);\n    },\n    setQuantity: (state, action: {payload : {id:number, quantity: 'inc' | 'decr'}}) => {\n      const {id, quantity} = action.payload;\n      const boughtGuitar = state.boughtGuitars.find((el) => el.id === id);\n      if (boughtGuitar) {\n        boughtGuitar.quantity = quantity === 'inc' ?  (boughtGuitar.quantity || 1) + 1 : (boughtGuitar.quantity || 1) - 1;\n        window.localStorage.setItem('boughtGuitars', String(boughtGuitar.id));\n        if (boughtGuitar.quantity < 1) {\n          state.isBasketRemoval = true;\n          boughtGuitar.quantity = (boughtGuitar.quantity || 0) + 1;\n        }\n      }\n    },\n    setIsDisconnect: (state, action ) => {\n      state.isDisconnect = action.payload;\n      if (!action.payload) {\n        toast.error('Internet disconnected');\n        state.isDisconnect = true;\n      }\n    },\n    setIsSuccessBasket: (state, action) => {\n      state.isSuccessBasketModal = action.payload;\n    },\n    setIsBasket: (state, action) => {\n      state.isBasketModalOpened = action.payload;\n    },\n    setIsGuitar: (state, action) => {\n      state.isGuitar = action.payload;\n    },\n    setIsBasketRemoval: (state, action) => {\n      state.isBasketRemoval = action.payload;\n    },\n    setIsCoupon: (state, action) => {\n      state.isCoupon = action.payload;\n    },\n  },\n});\n\nexport const {\n  loadGuitars,\n  loadGuitar,\n  loadComments,\n  sendComment,\n  setIsSuccessModalOpened,\n  setIsCommentModalOpened,\n  setIsSorting,\n  setIsSortInc,\n  setMinPrice,\n  setMaxPrice,\n  setSelectedTypes,\n  setSelectedStrings,\n  setFilteredGuitarsLength,\n  setFilteredPriceMin,\n  setFilteredPriceMax,\n  setStringsGroup,\n  setTypesGroup,\n  buyGuitar,\n  setQuantity,\n  deleteGuitar,\n  setIsDisconnect,\n  setIsBasket,\n  setIsSuccessBasket,\n  setIsGuitar,\n  setIsBasketRemoval,\n  setIsCoupon,\n} = guitarData.actions;\n"]},"metadata":{},"sourceType":"module"}