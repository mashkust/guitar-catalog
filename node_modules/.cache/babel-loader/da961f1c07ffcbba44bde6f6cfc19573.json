{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { api, store } from './index';\nimport { loadComments, loadGuitar, loadGuitars, sendComment } from './guitar-data';\nimport { errorHandle } from '../services/error-handle';\nimport { APIRoute } from '../const';\nexport const fetchGuitarsAction = createAsyncThunk('data/fetchGuitars', async () => {\n  try {\n    const {\n      data\n    } = await api.get(APIRoute.Guitars);\n    store.dispatch(loadGuitars(data));\n  } catch (error) {\n    errorHandle(error);\n  }\n});\nexport const fetchGuitarAction = createAsyncThunk('data/fetchGuitar', async guitarId => {\n  try {\n    const {\n      data\n    } = await api.get(`${APIRoute.Guitar}${guitarId}`);\n    store.dispatch(loadGuitar(data));\n  } catch (error) {\n    errorHandle(error);\n  }\n});\nexport const fetchCommentsAction = createAsyncThunk('data/fetchComments', async guitarId => {\n  try {\n    const {\n      data\n    } = await api.get(`${APIRoute.Guitar}${guitarId}${APIRoute.Comments}`);\n    store.dispatch(loadComments(data));\n  } catch (error) {\n    errorHandle(error);\n  }\n});\nexport const sendCommentAction = createAsyncThunk('data/sendComment', async _ref => {\n  let {\n    guitarId,\n    userName,\n    advantage,\n    disadvantage,\n    comment,\n    rating\n  } = _ref;\n\n  try {\n    const data = {\n      guitarId,\n      userName,\n      advantage,\n      disadvantage,\n      comment,\n      rating\n    };\n    await api.post(APIRoute.Comments, data);\n    store.dispatch(sendComment(false));\n  } catch (error) {\n    errorHandle(error);\n  }\n});","map":{"version":3,"sources":["/Users/mashkust/react-starter-pack-main/src/store/api-actions.ts"],"names":["createAsyncThunk","api","store","loadComments","loadGuitar","loadGuitars","sendComment","errorHandle","APIRoute","fetchGuitarsAction","data","get","Guitars","dispatch","error","fetchGuitarAction","guitarId","Guitar","fetchCommentsAction","Comments","sendCommentAction","userName","advantage","disadvantage","comment","rating","post"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,kBAAjC;AACA,SAASC,GAAT,EAAcC,KAAd,QAA2B,SAA3B;AAEA,SAASC,YAAT,EAAuBC,UAAvB,EAAmCC,WAAnC,EAAgDC,WAAhD,QAAmE,eAAnE;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,QAAT,QAAyB,UAAzB;AAGA,OAAO,MAAMC,kBAAkB,GAAGT,gBAAgB,CAChD,mBADgD,EAEhD,YAAY;AACV,MAAI;AACF,UAAM;AAAEU,MAAAA;AAAF,QAAW,MAAMT,GAAG,CAACU,GAAJ,CAAkBH,QAAQ,CAACI,OAA3B,CAAvB;AACAV,IAAAA,KAAK,CAACW,QAAN,CAAeR,WAAW,CAACK,IAAD,CAA1B;AACD,GAHD,CAGE,OAAOI,KAAP,EAAc;AACdP,IAAAA,WAAW,CAACO,KAAD,CAAX;AACD;AACF,CAT+C,CAA3C;AAYP,OAAO,MAAMC,iBAAiB,GAAGf,gBAAgB,CAC/C,kBAD+C,EAE/C,MAAOgB,QAAP,IAA4B;AAC1B,MAAI;AACF,UAAM;AAAEN,MAAAA;AAAF,QAAW,MAAMT,GAAG,CAACU,GAAJ,CAAiB,GAAEH,QAAQ,CAACS,MAAO,GAAED,QAAS,EAA9C,CAAvB;AACAd,IAAAA,KAAK,CAACW,QAAN,CAAeT,UAAU,CAACM,IAAD,CAAzB;AACD,GAHD,CAGE,OAAOI,KAAP,EAAc;AACdP,IAAAA,WAAW,CAACO,KAAD,CAAX;AACD;AACF,CAT8C,CAA1C;AAYP,OAAO,MAAMI,mBAAmB,GAAGlB,gBAAgB,CACjD,oBADiD,EAEjD,MAAOgB,QAAP,IAA4B;AAC1B,MAAI;AACF,UAAM;AAAEN,MAAAA;AAAF,QAAW,MAAMT,GAAG,CAACU,GAAJ,CAAoB,GAAEH,QAAQ,CAACS,MAAO,GAAED,QAAS,GAAER,QAAQ,CAACW,QAAS,EAArE,CAAvB;AACAjB,IAAAA,KAAK,CAACW,QAAN,CAAeV,YAAY,CAACO,IAAD,CAA3B;AACD,GAHD,CAGE,OAAOI,KAAP,EAAc;AACdP,IAAAA,WAAW,CAACO,KAAD,CAAX;AACD;AACF,CATgD,CAA5C;AAYP,OAAO,MAAMM,iBAAiB,GAAGpB,gBAAgB,CAC/C,kBAD+C,EAE/C,cAAuF;AAAA,MAAhF;AAAEgB,IAAAA,QAAF;AAAYK,IAAAA,QAAZ;AAAsBC,IAAAA,SAAtB;AAAiCC,IAAAA,YAAjC;AAA+CC,IAAAA,OAA/C;AAAwDC,IAAAA;AAAxD,GAAgF;;AACrF,MAAI;AACF,UAAMf,IAAI,GAAG;AAAEM,MAAAA,QAAF;AAAYK,MAAAA,QAAZ;AAAsBC,MAAAA,SAAtB;AAAiCC,MAAAA,YAAjC;AAA+CC,MAAAA,OAA/C;AAAwDC,MAAAA;AAAxD,KAAb;AACA,UAAMxB,GAAG,CAACyB,IAAJ,CAAoBlB,QAAQ,CAACW,QAA7B,EAAuCT,IAAvC,CAAN;AACAR,IAAAA,KAAK,CAACW,QAAN,CAAeP,WAAW,CAAC,KAAD,CAA1B;AACD,GAJD,CAIE,OAAOQ,KAAP,EAAc;AACdP,IAAAA,WAAW,CAACO,KAAD,CAAX;AACD;AACF,CAV8C,CAA1C","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { api, store } from './index';\nimport { Guitar, NewReview, Comment } from '../types/types';\nimport { loadComments, loadGuitar, loadGuitars, sendComment } from './guitar-data';\nimport { errorHandle } from '../services/error-handle';\nimport { APIRoute } from '../const';\n\n\nexport const fetchGuitarsAction = createAsyncThunk(\n  'data/fetchGuitars',\n  async () => {\n    try {\n      const { data } = await api.get<Guitar[]>(APIRoute.Guitars);\n      store.dispatch(loadGuitars(data));\n    } catch (error) {\n      errorHandle(error);\n    }\n  },\n);\n\nexport const fetchGuitarAction = createAsyncThunk(\n  'data/fetchGuitar',\n  async (guitarId: number) => {\n    try {\n      const { data } = await api.get<Guitar>(`${APIRoute.Guitar}${guitarId}`);\n      store.dispatch(loadGuitar(data));\n    } catch (error) {\n      errorHandle(error);\n    }\n  },\n);\n\nexport const fetchCommentsAction = createAsyncThunk(\n  'data/fetchComments',\n  async (guitarId: number) => {\n    try {\n      const { data } = await api.get<Comment[]>(`${APIRoute.Guitar}${guitarId}${APIRoute.Comments}`);\n      store.dispatch(loadComments(data));\n    } catch (error) {\n      errorHandle(error);\n    }\n  },\n);\n\nexport const sendCommentAction = createAsyncThunk(\n  'data/sendComment',\n  async ({ guitarId, userName, advantage, disadvantage, comment, rating }: NewReview) => {\n    try {\n      const data = { guitarId, userName, advantage, disadvantage, comment, rating };\n      await api.post<NewReview>(APIRoute.Comments, data);\n      store.dispatch(sendComment(false));\n    } catch (error) {\n      errorHandle(error);\n    }\n  },\n);\n"]},"metadata":{},"sourceType":"module"}